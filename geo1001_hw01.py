#-- GEO1001.2020--hw01
#-- [MAUNDRI PRIHANGGO] 
#-- [5151279]

import math
import os
import pandas as pd
import numpy as np
import thinkstats2
import thinkplot
import matplotlib.pyplot as plt
from openpyxl import load_workbook
from scipy import stats
import scipy.stats as st
from scipy.stats import ttest_ind
from matplotlib.ticker import FixedLocator, FixedFormatter

#After Lesson A1
##Compute mean statistics (mean, variance and standard deviation for each of the sensors variables

df = pd.read_excel('D:/GEO1001/assignment/assignment01/hw01/HEAT - A_final.xls', header = 3)
df = df[1:len(df)]
ws_heatA = df['Wind Speed']
wd_heatA = df['Direction â True']
cws_heatA = df['Crosswind Speed']
hws_heatA = df['Headwind Speed']
t_heatA = df['Temperature']
gt_heatA = df['Globe Temperature']
wc_heatA = df['Wind Chill']
rh_heatA = df['Relative Humidity']
hsi_heatA = df['Heat Stress Index']
dp_heatA = df['Dew Point']
pwbt_heatA = df['Psychro Wet Bulb Temperature']
sp_heatA = df['Station Pressure']
bp_heatA = df['Barometric Pressure']
al_heatA = df['Altitude']
da_heatA = df['Density Altitude']
nwbt_heatA = df['NA Wet Bulb Temperature']
wbgt_heatA = df['WBGT']
twl_heatA = df['TWL']

print('"Heat Sensor A\"')
print('1. Mean')
ws_heatA = ws_heatA.astype(np.float)
print('wind speed \t\t\t:', ws_heatA.mean())
wd_heatA = wd_heatA.astype(np.float)
print('wind direction \t\t\t:', wd_heatA.mean())
cws_heatA = cws_heatA.astype(np.float)
print('crosswind speed \t\t:', cws_heatA.mean())
hws_heatA = hws_heatA.astype(np.float)
print('headwind speed \t\t\t:', hws_heatA.mean())
t_heatA = t_heatA.astype(np.float)
print('temperature \t\t\t:', t_heatA.mean())
gt_heatA = gt_heatA.astype(np.float)
print('global temperature \t\t:', gt_heatA.mean())
wc_heatA = wc_heatA.astype(np.float)
print('wind chill \t\t\t:', wc_heatA.mean())
rh_heatA = rh_heatA.astype(np.float)
print('relative humidity \t\t:', rh_heatA.mean())
hsi_heatA = hsi_heatA.astype(np.float)
print('heat stress index \t\t:', hsi_heatA.mean())
dp_heatA = dp_heatA.astype(np.float)
print('dew point \t\t\t:', dp_heatA.mean())
pwbt_heatA = pwbt_heatA.astype(np.float)
print('psychro wet bulb temperature \t:', pwbt_heatA.mean())
sp_heatA = sp_heatA.astype(np.float)
print('station pressure \t\t:', sp_heatA.mean())
bp_heatA = bp_heatA.astype(np.float)
print('barometric pressure \t\t:', bp_heatA.mean())
al_heatA = al_heatA.astype(np.float)
print('altitude \t\t\t:', al_heatA.mean())
da_heatA = da_heatA.astype(np.float)
print('density altitude \t\t:', da_heatA.mean())
nwbt_heatA = nwbt_heatA.astype(np.float)
print('NA wet bulb temperature \t:', nwbt_heatA.mean())
wbgt_heatA = wbgt_heatA.astype(np.float)
print('WBGT \t\t\t\t:', wbgt_heatA.mean())
twl_heatA = twl_heatA.astype(np.float)
print('TWL \t\t\t\t:', twl_heatA.mean())

print('2. Variance')
ws_heatA = ws_heatA.astype(np.float)
print('wind speed \t\t\t:', ws_heatA.var())
wd_heatA = wd_heatA.astype(np.float)
print('wind direction \t\t\t:', wd_heatA.var())
cws_heatA = cws_heatA.astype(np.float)
print('crosswind speed \t\t:', cws_heatA.var())
hws_heatA = hws_heatA.astype(np.float)
print('headwind speed \t\t\t:', hws_heatA.var())
t_heatA = t_heatA.astype(np.float)
print('temperature \t\t\t:', t_heatA.var())
gt_heatA = gt_heatA.astype(np.float)
print('global temperature \t\t:', gt_heatA.var())
wc_heatA = wc_heatA.astype(np.float)
print('wind chill \t\t\t:', wc_heatA.var())
rh_heatA = rh_heatA.astype(np.float)
print('relative humidity \t\t:', rh_heatA.var())
hsi_heatA = hsi_heatA.astype(np.float)
print('heat stress index \t\t:', hsi_heatA.var())
dp_heatA = dp_heatA.astype(np.float)
print('dew point \t\t\t:', dp_heatA.var())
pwbt_heatA = pwbt_heatA.astype(np.float)
print('psychro wet bulb temperature \t:', pwbt_heatA.var())
sp_heatA = sp_heatA.astype(np.float)
print('station pressure \t\t:', sp_heatA.var())
bp_heatA = bp_heatA.astype(np.float)
print('barometric pressure \t\t:', bp_heatA.var())
al_heatA = al_heatA.astype(np.float)
print('altitude \t\t\t:', al_heatA.var())
da_heatA = da_heatA.astype(np.float)
print('density altitude \t\t:', da_heatA.var())
nwbt_heatA = nwbt_heatA.astype(np.float)
print('NA wet bulb temperature \t:', nwbt_heatA.var())
wbgt_heatA = wbgt_heatA.astype(np.float)
print('WBGT \t\t\t\t:', wbgt_heatA.var())
twl_heatA = twl_heatA.astype(np.float)
print('TWL \t\t\t\t:', twl_heatA.var())

print('3. Standar Deviation')
ws_heatA = ws_heatA.astype(np.float)
print('wind speed \t\t\t:', ws_heatA.std())
wd_heatA = wd_heatA.astype(np.float)
print('wind direction \t\t\t:', wd_heatA.std())
cws_heatA = cws_heatA.astype(np.float)
print('crosswind speed \t\t:', cws_heatA.std())
hws_heatA = hws_heatA.astype(np.float)
print('headwind speed \t\t\t:', hws_heatA.std())
t_heatA = t_heatA.astype(np.float)
print('temperature \t\t\t:', t_heatA.std())
gt_heatA = gt_heatA.astype(np.float)
print('global temperature \t\t:', gt_heatA.std())
wc_heatA = wc_heatA.astype(np.float)
print('wind chill \t\t\t:', wc_heatA.std())
rh_heatA = rh_heatA.astype(np.float)
print('relative humidity \t\t:', rh_heatA.std())
hsi_heatA = hsi_heatA.astype(np.float)
print('heat stress index \t\t:', hsi_heatA.std())
dp_heatA = dp_heatA.astype(np.float)
print('dew point \t\t\t:', dp_heatA.std())
pwbt_heatA = pwbt_heatA.astype(np.float)
print('psychro wet bulb temperature \t:', pwbt_heatA.std())
sp_heatA = sp_heatA.astype(np.float)
print('station pressure \t\t:', sp_heatA.std())
bp_heatA = bp_heatA.astype(np.float)
print('barometric pressure \t\t:', bp_heatA.std())
al_heatA = al_heatA.astype(np.float)
print('altitude \t\t\t:', al_heatA.std())
da_heatA = da_heatA.astype(np.float)
print('density altitude \t\t:', da_heatA.std())
nwbt_heatA = nwbt_heatA.astype(np.float)
print('NA wet bulb temperature \t:', nwbt_heatA.std())
wbgt_heatA = wbgt_heatA.astype(np.float)
print('WBGT \t\t\t\t:', wbgt_heatA.std())
twl_heatA = twl_heatA.astype(np.float)
print('TWL \t\t\t\t:', twl_heatA.std())

df = pd.read_excel('D:/GEO1001/assignment/assignment01/hw01/HEAT - B_final.xls', header = 3)
df = df[1:len(df)]
ws_heatB = df['Wind Speed']
wd_heatB = df['Direction â True']
cws_heatB = df['Crosswind Speed']
hws_heatB = df['Headwind Speed']
t_heatB = df['Temperature']
gt_heatB = df['Globe Temperature']
wc_heatB = df['Wind Chill']
rh_heatB = df['Relative Humidity']
hsi_heatB = df['Heat Stress Index']
dp_heatB = df['Dew Point']
pwbt_heatB = df['Psychro Wet Bulb Temperature']
sp_heatB = df['Station Pressure']
bp_heatB = df['Barometric Pressure']
al_heatB = df['Altitude']
da_heatB = df['Density Altitude']
nwbt_heatB = df['NA Wet Bulb Temperature']
wbgt_heatB = df['WBGT']
twl_heatB = df['TWL']

print('"Heat Sensor B\"')
print('1. Mean')
ws_heatB = ws_heatB.astype(np.float)
print('wind speed \t\t\t:', ws_heatB.mean())
wd_heatB = wd_heatB.astype(np.float)
print('wind direction \t\t\t:', wd_heatB.mean())
cws_heatB = cws_heatB.astype(np.float)
print('crosswind speed \t\t:', cws_heatB.mean())
hws_heatB = hws_heatB.astype(np.float)
print('headwind speed \t\t\t:', hws_heatB.mean())
t_heatB = t_heatB.astype(np.float)
print('temperature \t\t\t:', t_heatB.mean())
gt_heatB = gt_heatB.astype(np.float)
print('global temperature \t\t:', gt_heatB.mean())
wc_heatB = wc_heatB.astype(np.float)
print('wind chill \t\t\t:', wc_heatB.mean())
rh_heatB = rh_heatB.astype(np.float)
print('relative humidity \t\t:', rh_heatB.mean())
hsi_heatB = hsi_heatB.astype(np.float)
print('heat stress index \t\t:', hsi_heatB.mean())
dp_heatB = dp_heatB.astype(np.float)
print('dew point \t\t\t:', dp_heatB.mean())
pwbt_heatB = pwbt_heatB.astype(np.float)
print('psychro wet bulb temperature \t:', pwbt_heatB.mean())
sp_heatB = sp_heatB.astype(np.float)
print('station pressure \t\t:', sp_heatB.mean())
bp_heatB = bp_heatB.astype(np.float)
print('barometric pressure \t\t:', bp_heatB.mean())
al_heatB = al_heatB.astype(np.float)
print('altitude \t\t\t:', al_heatB.mean())
da_heatB = da_heatB.astype(np.float)
print('density altitude \t\t:', da_heatB.mean())
nwbt_heatB = nwbt_heatB.astype(np.float)
print('NA wet bulb temperature \t:', nwbt_heatB.mean())
wbgt_heatB = wbgt_heatB.astype(np.float)
print('WBGT \t\t\t\t:', wbgt_heatB.mean())
twl_heatB = twl_heatB.astype(np.float)
print('TWL \t\t\t\t:', twl_heatB.mean())

print('2. Variance')
ws_heatB = ws_heatB.astype(np.float)
print('wind speed \t\t\t:', ws_heatB.var())
wd_heatB = wd_heatB.astype(np.float)
print('wind direction \t\t\t:', wd_heatB.var())
cws_heatB = cws_heatB.astype(np.float)
print('crosswind speed \t\t:', cws_heatB.var())
hws_heatB = hws_heatB.astype(np.float)
print('headwind speed \t\t\t:', hws_heatB.var())
t_heatB = t_heatB.astype(np.float)
print('temperature \t\t\t:', t_heatB.var())
gt_heatB = gt_heatB.astype(np.float)
print('global temperature \t\t:', gt_heatB.var())
wc_heatB = wc_heatB.astype(np.float)
print('wind chill \t\t\t:', wc_heatB.var())
rh_heatB = rh_heatB.astype(np.float)
print('relative humidity \t\t:', rh_heatB.var())
hsi_heatB = hsi_heatB.astype(np.float)
print('heat stress index \t\t:', hsi_heatB.var())
dp_heatB = dp_heatB.astype(np.float)
print('dew point \t\t\t:', dp_heatB.var())
pwbt_heatB = pwbt_heatB.astype(np.float)
print('psychro wet bulb temperature \t:', pwbt_heatB.var())
sp_heatB = sp_heatB.astype(np.float)
print('station pressure \t\t:', sp_heatB.var())
bp_heatB = bp_heatB.astype(np.float)
print('barometric pressure \t\t:', bp_heatB.var())
al_heatB = al_heatB.astype(np.float)
print('altitude \t\t\t:', al_heatB.var())
da_heatB = da_heatB.astype(np.float)
print('density altitude \t\t:', da_heatB.var())
nwbt_heatB = nwbt_heatB.astype(np.float)
print('NA wet bulb temperature \t:', nwbt_heatB.var())
wbgt_heatB = wbgt_heatB.astype(np.float)
print('WBGT \t\t\t\t:', wbgt_heatB.var())
twl_heatB = twl_heatB.astype(np.float)
print('TWL \t\t\t\t:', twl_heatB.var())

print('3. Standar Deviation')
ws_heatB = ws_heatB.astype(np.float)
print('wind speed \t\t\t:', ws_heatB.std())
wd_heatB = wd_heatB.astype(np.float)
print('wind direction \t\t\t:', wd_heatB.std())
cws_heatB = cws_heatB.astype(np.float)
print('crosswind speed \t\t:', cws_heatB.std())
hws_heatB = hws_heatB.astype(np.float)
print('headwind speed \t\t\t:', hws_heatB.std())
t_heatB = t_heatB.astype(np.float)
print('temperature \t\t\t:', t_heatB.std())
gt_heatB = gt_heatB.astype(np.float)
print('global temperature \t\t:', gt_heatB.std())
wc_heatB = wc_heatB.astype(np.float)
print('wind chill \t\t\t:', wc_heatB.std())
rh_heatB = rh_heatB.astype(np.float)
print('relative humidity \t\t:', rh_heatB.std())
hsi_heatB = hsi_heatB.astype(np.float)
print('heat stress index \t\t:', hsi_heatB.std())
dp_heatB = dp_heatB.astype(np.float)
print('dew point \t\t\t:', dp_heatB.std())
pwbt_heatB = pwbt_heatB.astype(np.float)
print('psychro wet bulb temperature \t:', pwbt_heatB.std())
sp_heatB = sp_heatB.astype(np.float)
print('station pressure \t\t:', sp_heatB.std())
bp_heatB = bp_heatB.astype(np.float)
print('barometric pressure \t\t:', bp_heatB.std())
al_heatB = al_heatB.astype(np.float)
print('altitude \t\t\t:', al_heatB.std())
da_heatB = da_heatB.astype(np.float)
print('density altitude \t\t:', da_heatB.std())
nwbt_heatB = nwbt_heatB.astype(np.float)
print('NA wet bulb temperature \t:', nwbt_heatB.std())
wbgt_heatB = wbgt_heatB.astype(np.float)
print('WBGT \t\t\t\t:', wbgt_heatB.std())
twl_heatB = twl_heatB.astype(np.float)
print('TWL \t\t\t\t:', twl_heatB.std())

df = pd.read_excel('D:/GEO1001/assignment/assignment01/hw01/HEAT - C_final.xls', header = 3)
df = df[1:len(df)]
ws_heatC = df['Wind Speed']
wd_heatC = df['Direction â True']
cws_heatC = df['Crosswind Speed']
hws_heatC = df['Headwind Speed']
t_heatC = df['Temperature']
gt_heatC = df['Globe Temperature']
wc_heatC = df['Wind Chill']
rh_heatC = df['Relative Humidity']
hsi_heatC = df['Heat Stress Index']
dp_heatC = df['Dew Point']
pwbt_heatC = df['Psychro Wet Bulb Temperature']
sp_heatC = df['Station Pressure']
bp_heatC = df['Barometric Pressure']
al_heatC = df['Altitude']
da_heatC = df['Density Altitude']
nwbt_heatC = df['NA Wet Bulb Temperature']
wbgt_heatC = df['WBGT']
twl_heatC = df['TWL']

print('"Heat Sensor C\"')
print('1. Mean')
ws_heatC = ws_heatC.astype(np.float)
print('wind speed \t\t\t:', ws_heatC.mean())
wd_heatC = wd_heatC.astype(np.float)
print('wind direction \t\t\t:', wd_heatC.mean())
cws_heatC = cws_heatC.astype(np.float)
print('crosswind speed \t\t:', cws_heatC.mean())
hws_heatC = hws_heatC.astype(np.float)
print('headwind speed \t\t\t:', hws_heatC.mean())
t_heatC = t_heatC.astype(np.float)
print('temperature \t\t\t:', t_heatC.mean())
gt_heatC = gt_heatC.astype(np.float)
print('global temperature \t\t:', gt_heatC.mean())
wc_heatC = wc_heatC.astype(np.float)
print('wind chill \t\t\t:', wc_heatC.mean())
rh_heatC = rh_heatC.astype(np.float)
print('relative humidity \t\t:', rh_heatC.mean())
hsi_heatC = hsi_heatC.astype(np.float)
print('heat stress index \t\t:', hsi_heatC.mean())
dp_heatC = dp_heatC.astype(np.float)
print('dew point \t\t\t:', dp_heatC.mean())
pwbt_heatC = pwbt_heatC.astype(np.float)
print('psychro wet bulb temperature \t:', pwbt_heatC.mean())
sp_heatC = sp_heatC.astype(np.float)
print('station pressure \t\t:', sp_heatC.mean())
bp_heatC = bp_heatC.astype(np.float)
print('barometric pressure \t\t:', bp_heatC.mean())
al_heatC = al_heatC.astype(np.float)
print('altitude \t\t\t:', al_heatC.mean())
da_heatC = da_heatC.astype(np.float)
print('density altitude \t\t:', da_heatC.mean())
nwbt_heatC = nwbt_heatC.astype(np.float)
print('NA wet bulb temperature \t:', nwbt_heatC.mean())
wbgt_heatC = wbgt_heatC.astype(np.float)
print('WBGT \t\t\t\t:', wbgt_heatC.mean())
twl_heatC = twl_heatC.astype(np.float)
print('TWL \t\t\t\t:', twl_heatC.mean())

print('2. Variance')
ws_heatC = ws_heatC.astype(np.float)
print('wind speed \t\t\t:', ws_heatC.var())
wd_heatC = wd_heatC.astype(np.float)
print('wind direction \t\t\t:', wd_heatC.var())
cws_heatC = cws_heatC.astype(np.float)
print('crosswind speed \t\t:', cws_heatC.var())
hws_heatC = hws_heatC.astype(np.float)
print('headwind speed \t\t\t:', hws_heatC.var())
t_heatC = t_heatC.astype(np.float)
print('temperature \t\t\t:', t_heatC.var())
gt_heatC = gt_heatC.astype(np.float)
print('global temperature \t\t:', gt_heatC.var())
wc_heatC = wc_heatC.astype(np.float)
print('wind chill \t\t\t:', wc_heatC.var())
rh_heatC = rh_heatC.astype(np.float)
print('relative humidity \t\t:', rh_heatC.var())
hsi_heatC = hsi_heatC.astype(np.float)
print('heat stress index \t\t:', hsi_heatC.var())
dp_heatC = dp_heatC.astype(np.float)
print('dew point \t\t\t:', dp_heatC.var())
pwbt_heatC = pwbt_heatC.astype(np.float)
print('psychro wet bulb temperature \t:', pwbt_heatC.var())
sp_heatC = sp_heatC.astype(np.float)
print('station pressure \t\t:', sp_heatC.var())
bp_heatC = bp_heatC.astype(np.float)
print('barometric pressure \t\t:', bp_heatC.var())
al_heatC = al_heatC.astype(np.float)
print('altitude \t\t\t:', al_heatC.var())
da_heatC = da_heatC.astype(np.float)
print('density altitude \t\t:', da_heatC.var())
nwbt_heatC = nwbt_heatC.astype(np.float)
print('NA wet bulb temperature \t:', nwbt_heatC.var())
wbgt_heatC = wbgt_heatC.astype(np.float)
print('WBGT \t\t\t\t:', wbgt_heatC.var())
twl_heatC = twl_heatC.astype(np.float)
print('TWL \t\t\t\t:', twl_heatC.var())

print('3. Standar Deviation')
ws_heatC = ws_heatC.astype(np.float)
print('wind speed \t\t\t:', ws_heatC.std())
wd_heatC = wd_heatC.astype(np.float)
print('wind direction \t\t\t:', wd_heatC.std())
cws_heatC = cws_heatC.astype(np.float)
print('crosswind speed \t\t:', cws_heatC.std())
hws_heatC = hws_heatC.astype(np.float)
print('headwind speed \t\t\t:', hws_heatC.std())
t_heatC = t_heatC.astype(np.float)
print('temperature \t\t\t:', t_heatC.std())
gt_heatC = gt_heatC.astype(np.float)
print('global temperature \t\t:', gt_heatC.std())
wc_heatC = wc_heatC.astype(np.float)
print('wind chill \t\t\t:', wc_heatC.std())
rh_heatC = rh_heatC.astype(np.float)
print('relative humidity \t\t:', rh_heatC.std())
hsi_heatC = hsi_heatC.astype(np.float)
print('heat stress index \t\t:', hsi_heatC.std())
dp_heatC = dp_heatC.astype(np.float)
print('dew point \t\t\t:', dp_heatC.std())
pwbt_heatC = pwbt_heatC.astype(np.float)
print('psychro wet bulb temperature \t:', pwbt_heatC.std())
sp_heatC = sp_heatC.astype(np.float)
print('station pressure \t\t:', sp_heatC.std())
bp_heatC = bp_heatC.astype(np.float)
print('barometric pressure \t\t:', bp_heatC.std())
al_heatC = al_heatC.astype(np.float)
print('altitude \t\t\t:', al_heatC.std())
da_heatC = da_heatC.astype(np.float)
print('density altitude \t\t:', da_heatC.std())
nwbt_heatC = nwbt_heatC.astype(np.float)
print('NA wet bulb temperature \t:', nwbt_heatC.std())
wbgt_heatC = wbgt_heatC.astype(np.float)
print('WBGT \t\t\t\t:', wbgt_heatC.std())
twl_heatC = twl_heatC.astype(np.float)
print('TWL \t\t\t\t:', twl_heatC.std())

df = pd.read_excel('D:/GEO1001/assignment/assignment01/hw01/HEAT - D_final.xls', header = 3)
df = df[1:len(df)]
ws_heatD = df['Wind Speed']
wd_heatD = df['Direction â True']
cws_heatD = df['Crosswind Speed']
hws_heatD = df['Headwind Speed']
t_heatD = df['Temperature']
gt_heatD = df['Globe Temperature']
wc_heatD = df['Wind Chill']
rh_heatD = df['Relative Humidity']
hsi_heatD = df['Heat Stress Index']
dp_heatD = df['Dew Point']
pwbt_heatD = df['Psychro Wet Bulb Temperature']
sp_heatD = df['Station Pressure']
bp_heatD = df['Barometric Pressure']
al_heatD = df['Altitude']
da_heatD = df['Density Altitude']
nwbt_heatD = df['NA Wet Bulb Temperature']
wbgt_heatD = df['WBGT']
twl_heatD = df['TWL']

print('"Heat Sensor D\"')
print('1. Mean')
ws_heatD = ws_heatD.astype(np.float)
print('wind speed \t\t\t:', ws_heatD.mean())
wd_heatD = wd_heatD.astype(np.float)
print('wind direction \t\t\t:', wd_heatD.mean())
cws_heatD = cws_heatD.astype(np.float)
print('crosswind speed \t\t:', cws_heatD.mean())
hws_heatD = hws_heatD.astype(np.float)
print('headwind speed \t\t\t:', hws_heatD.mean())
t_heatD = t_heatD.astype(np.float)
print('temperature \t\t\t:', t_heatD.mean())
gt_heatD = gt_heatD.astype(np.float)
print('global temperature \t\t:', gt_heatD.mean())
wc_heatD = wc_heatD.astype(np.float)
print('wind chill \t\t\t:', wc_heatD.mean())
rh_heatD = rh_heatD.astype(np.float)
print('relative humidity \t\t:', rh_heatD.mean())
hsi_heatD = hsi_heatD.astype(np.float)
print('heat stress index \t\t:', hsi_heatD.mean())
dp_heatD = dp_heatD.astype(np.float)
print('dew point \t\t\t:', dp_heatD.mean())
pwbt_heatD = pwbt_heatD.astype(np.float)
print('psychro wet bulb temperature \t:', pwbt_heatD.mean())
sp_heatD = sp_heatD.astype(np.float)
print('station pressure \t\t:', sp_heatD.mean())
bp_heatD = bp_heatD.astype(np.float)
print('barometric pressure \t\t:', bp_heatD.mean())
al_heatD = al_heatD.astype(np.float)
print('altitude \t\t\t:', al_heatD.mean())
da_heatD = da_heatD.astype(np.float)
print('density altitude \t\t:', da_heatD.mean())
nwbt_heatD = nwbt_heatD.astype(np.float)
print('NA wet bulb temperature \t:', nwbt_heatD.mean())
wbgt_heatD = wbgt_heatD.astype(np.float)
print('WBGT \t\t\t\t:', wbgt_heatD.mean())
twl_heatD = twl_heatD.astype(np.float)
print('TWL \t\t\t\t:', twl_heatD.mean())

print('2. Variance')
ws_heatD = ws_heatD.astype(np.float)
print('wind speed \t\t\t:', ws_heatD.var())
wd_heatD = wd_heatD.astype(np.float)
print('wind direction \t\t\t:', wd_heatD.var())
cws_heatD = cws_heatD.astype(np.float)
print('crosswind speed \t\t:', cws_heatD.var())
hws_heatD = hws_heatD.astype(np.float)
print('headwind speed \t\t\t:', hws_heatD.var())
t_heatD = t_heatD.astype(np.float)
print('temperature \t\t\t:', t_heatD.var())
gt_heatD = gt_heatD.astype(np.float)
print('global temperature \t\t:', gt_heatD.var())
wc_heatD = wc_heatD.astype(np.float)
print('wind chill \t\t\t:', wc_heatD.var())
rh_heatD = rh_heatD.astype(np.float)
print('relative humidity \t\t:', rh_heatD.var())
hsi_heatD = hsi_heatD.astype(np.float)
print('heat stress index \t\t:', hsi_heatD.var())
dp_heatD = dp_heatD.astype(np.float)
print('dew point \t\t\t:', dp_heatD.var())
pwbt_heatD = pwbt_heatD.astype(np.float)
print('psychro wet bulb temperature \t:', pwbt_heatD.var())
sp_heatD = sp_heatD.astype(np.float)
print('station pressure \t\t:', sp_heatD.var())
bp_heatD = bp_heatD.astype(np.float)
print('barometric pressure \t\t:', bp_heatD.var())
al_heatD = al_heatD.astype(np.float)
print('altitude \t\t\t:', al_heatD.var())
da_heatD = da_heatD.astype(np.float)
print('density altitude \t\t:', da_heatD.var())
nwbt_heatD = nwbt_heatD.astype(np.float)
print('NA wet bulb temperature \t:', nwbt_heatD.var())
wbgt_heatD = wbgt_heatD.astype(np.float)
print('WBGT \t\t\t\t:', wbgt_heatD.var())
twl_heatD = twl_heatD.astype(np.float)
print('TWL \t\t\t\t:', twl_heatD.var())

print('3. Standar Deviation')
ws_heatD = ws_heatD.astype(np.float)
print('wind speed \t\t\t:', ws_heatD.std())
wd_heatD = wd_heatD.astype(np.float)
print('wind direction \t\t\t:', wd_heatD.std())
cws_heatD = cws_heatD.astype(np.float)
print('crosswind speed \t\t:', cws_heatD.std())
hws_heatD = hws_heatD.astype(np.float)
print('headwind speed \t\t\t:', hws_heatD.std())
t_heatD = t_heatD.astype(np.float)
print('temperature \t\t\t:', t_heatD.std())
gt_heatD = gt_heatD.astype(np.float)
print('global temperature \t\t:', gt_heatD.std())
wc_heatD = wc_heatD.astype(np.float)
print('wind chill \t\t\t:', wc_heatD.std())
rh_heatD = rh_heatD.astype(np.float)
print('relative humidity \t\t:', rh_heatD.std())
hsi_heatD = hsi_heatD.astype(np.float)
print('heat stress index \t\t:', hsi_heatD.std())
dp_heatD = dp_heatD.astype(np.float)
print('dew point \t\t\t:', dp_heatD.std())
pwbt_heatD = pwbt_heatD.astype(np.float)
print('psychro wet bulb temperature \t:', pwbt_heatD.std())
sp_heatD = sp_heatD.astype(np.float)
print('station pressure \t\t:', sp_heatD.std())
bp_heatD = bp_heatD.astype(np.float)
print('barometric pressure \t\t:', bp_heatD.std())
al_heatD = al_heatD.astype(np.float)
print('altitude \t\t\t:', al_heatD.std())
da_heatD = da_heatD.astype(np.float)
print('density altitude \t\t:', da_heatD.std())
nwbt_heatD = nwbt_heatD.astype(np.float)
print('NA wet bulb temperature \t:', nwbt_heatD.std())
wbgt_heatD = wbgt_heatD.astype(np.float)
print('WBGT \t\t\t\t:', wbgt_heatD.std())
twl_heatD = twl_heatD.astype(np.float)
print('TWL \t\t\t\t:', twl_heatD.std())

df = pd.read_excel('D:/GEO1001/assignment/assignment01/hw01/HEAT - E_final.xls', header = 3)
df = df[1:len(df)]
ws_heatE = df['Wind Speed']
wd_heatE = df['Direction â True']
cws_heatE = df['Crosswind Speed']
hws_heatE = df['Headwind Speed']
t_heatE = df['Temperature']
gt_heatE = df['Globe Temperature']
wc_heatE = df['Wind Chill']
rh_heatE = df['Relative Humidity']
hsi_heatE = df['Heat Stress Index']
dp_heatE = df['Dew Point']
pwbt_heatE = df['Psychro Wet Bulb Temperature']
sp_heatE = df['Station Pressure']
bp_heatE = df['Barometric Pressure']
al_heatE = df['Altitude']
da_heatE = df['Density Altitude']
nwbt_heatE = df['NA Wet Bulb Temperature']
wbgt_heatE = df['WBGT']
twl_heatE = df['TWL']

print('"Heat Sensor E\"')
print('1. Mean')
ws_heatE = ws_heatE.astype(np.float)
print('wind speed \t\t\t:', ws_heatE.mean())
wd_heatE = wd_heatE.astype(np.float)
print('wind direction \t\t\t:', wd_heatE.mean())
cws_heatE = cws_heatE.astype(np.float)
print('crosswind speed \t\t:', cws_heatE.mean())
hws_heatE = hws_heatE.astype(np.float)
print('headwind speed \t\t\t:', hws_heatE.mean())
t_heatE = t_heatE.astype(np.float)
print('temperature \t\t\t:', t_heatE.mean())
gt_heatE = gt_heatE.astype(np.float)
print('global temperature \t\t:', gt_heatE.mean())
wc_heatE = wc_heatE.astype(np.float)
print('wind chill \t\t\t:', wc_heatE.mean())
rh_heatE = rh_heatE.astype(np.float)
print('relative humidity \t\t:', rh_heatE.mean())
hsi_heatE = hsi_heatE.astype(np.float)
print('heat stress index \t\t:', hsi_heatE.mean())
dp_heatE = dp_heatE.astype(np.float)
print('dew point \t\t\t:', dp_heatE.mean())
pwbt_heatE = pwbt_heatE.astype(np.float)
print('psychro wet bulb temperature \t:', pwbt_heatE.mean())
sp_heatE = sp_heatE.astype(np.float)
print('station pressure \t\t:', sp_heatE.mean())
bp_heatE = bp_heatE.astype(np.float)
print('barometric pressure \t\t:', bp_heatE.mean())
al_heatE = al_heatE.astype(np.float)
print('altitude \t\t\t:', al_heatE.mean())
da_heatE = da_heatE.astype(np.float)
print('density altitude \t\t:', da_heatE.mean())
nwbt_heatE = nwbt_heatE.astype(np.float)
print('NA wet bulb temperature \t:', nwbt_heatE.mean())
wbgt_heatE = wbgt_heatE.astype(np.float)
print('WBGT \t\t\t\t:', wbgt_heatE.mean())
twl_heatE = twl_heatE.astype(np.float)
print('TWL \t\t\t\t:', twl_heatE.mean())

print('2. Variance')
ws_heatE = ws_heatE.astype(np.float)
print('wind speed \t\t\t:', ws_heatE.var())
wd_heatE = wd_heatE.astype(np.float)
print('wind direction \t\t\t:', wd_heatE.var())
cws_heatE = cws_heatE.astype(np.float)
print('crosswind speed \t\t:', cws_heatE.var())
hws_heatE = hws_heatE.astype(np.float)
print('headwind speed \t\t\t:', hws_heatE.var())
t_heatE = t_heatE.astype(np.float)
print('temperature \t\t\t:', t_heatE.var())
gt_heatE = gt_heatE.astype(np.float)
print('global temperature \t\t:', gt_heatE.var())
wc_heatE = wc_heatE.astype(np.float)
print('wind chill \t\t\t:', wc_heatE.var())
rh_heatE = rh_heatE.astype(np.float)
print('relative humidity \t\t:', rh_heatE.var())
hsi_heatE = hsi_heatE.astype(np.float)
print('heat stress index \t\t:', hsi_heatE.var())
dp_heatE = dp_heatE.astype(np.float)
print('dew point \t\t\t:', dp_heatE.var())
pwbt_heatE = pwbt_heatE.astype(np.float)
print('psychro wet bulb temperature \t:', pwbt_heatE.var())
sp_heatE = sp_heatE.astype(np.float)
print('station pressure \t\t:', sp_heatE.var())
bp_heatE = bp_heatE.astype(np.float)
print('barometric pressure \t\t:', bp_heatE.var())
al_heatE = al_heatE.astype(np.float)
print('altitude \t\t\t:', al_heatE.var())
da_heatE = da_heatE.astype(np.float)
print('density altitude \t\t:', da_heatE.var())
nwbt_heatE = nwbt_heatE.astype(np.float)
print('NA wet bulb temperature \t:', nwbt_heatE.var())
wbgt_heatE = wbgt_heatE.astype(np.float)
print('WBGT \t\t\t\t:', wbgt_heatE.var())
twl_heatE = twl_heatE.astype(np.float)
print('TWL \t\t\t\t:', twl_heatE.var())

print('3. Standar Deviation')
ws_heatE = ws_heatE.astype(np.float)
print('wind speed \t\t\t:', ws_heatE.std())
wd_heatE = wd_heatE.astype(np.float)
print('wind direction \t\t\t:', wd_heatE.std())
cws_heatE = cws_heatE.astype(np.float)
print('crosswind speed \t\t:', cws_heatE.std())
hws_heatE = hws_heatE.astype(np.float)
print('headwind speed \t\t\t:', hws_heatE.std())
t_heatE = t_heatE.astype(np.float)
print('temperature \t\t\t:', t_heatE.std())
gt_heatE = gt_heatE.astype(np.float)
print('global temperature \t\t:', gt_heatE.std())
wc_heatE = wc_heatE.astype(np.float)
print('wind chill \t\t\t:', wc_heatE.std())
rh_heatE = rh_heatE.astype(np.float)
print('relative humidity \t\t:', rh_heatE.std())
hsi_heatE = hsi_heatE.astype(np.float)
print('heat stress index \t\t:', hsi_heatE.std())
dp_heatE = dp_heatE.astype(np.float)
print('dew point \t\t\t:', dp_heatE.std())
pwbt_heatE = pwbt_heatE.astype(np.float)
print('psychro wet bulb temperature \t:', pwbt_heatE.std())
sp_heatE = sp_heatE.astype(np.float)
print('station pressure \t\t:', sp_heatE.std())
bp_heatE = bp_heatE.astype(np.float)
print('barometric pressure \t\t:', bp_heatE.std())
al_heatE = al_heatE.astype(np.float)
print('altitude \t\t\t:', al_heatE.std())
da_heatE = da_heatE.astype(np.float)
print('density altitude \t\t:', da_heatE.std())
nwbt_heatE = nwbt_heatE.astype(np.float)
print('NA wet bulb temperature \t:', nwbt_heatE.std())
wbgt_heatE = wbgt_heatE.astype(np.float)
print('WBGT \t\t\t\t:', wbgt_heatE.std())
twl_heatE = twl_heatE.astype(np.float)
print('TWL \t\t\t\t:', twl_heatE.std())

##Create 1 plot that contains histograms for the 5 sensors Temperature values. Compare histograms with 5 and 50 bins
bin01 = 5
bin02 = 50

fig, axs = plt.subplots(nrows=1, ncols=2)
axs = axs.flatten()

axs[0].hist(t_heatA, bin01, edgecolor="k")
axs[0].set_title('Sensor A with 5 bin', fontsize = 15)
axs[0].tick_params(labelsize=10)
axs[0].set_ylabel ('Frequency', fontsize = 10)
axs[0].set_xlabel ('Temperature [deg C]', fontsize = 10)

axs[1].hist(t_heatA, bin02, edgecolor="k")
axs[1].set_title('Sensor A with 50 bin', fontsize = 15)
axs[1].tick_params(labelsize=10)
axs[1].set_ylabel ('Frequency', fontsize = 10)
axs[1].set_xlabel ('Temperature [deg C]', fontsize = 10)

fig, axs = plt.subplots(nrows=1, ncols=2)
axs = axs.flatten()
axs[0].hist(t_heatB, bin01, edgecolor="k")
axs[0].set_title('Sensor B with 5 bin', fontsize = 15)
axs[0].tick_params(labelsize=10)
axs[0].set_ylabel ('Frequency', fontsize = 10)
axs[0].set_xlabel ('Temperature [deg C]', fontsize = 10)

axs[1].hist(t_heatB, bin02, edgecolor="k")
axs[1].set_title('Sensor B with 50 bin', fontsize = 15)
axs[1].tick_params(labelsize=10)
axs[1].set_ylabel ('Frequency', fontsize = 10)
axs[1].set_xlabel ('Temperature [deg C]', fontsize = 10)

fig, axs = plt.subplots(nrows=1, ncols=2)
axs = axs.flatten()
axs[0].hist(t_heatC, bin01, edgecolor="k")
axs[0].set_title('Sensor C with 5 bin', fontsize = 15)
axs[0].tick_params(labelsize=10)
axs[0].set_ylabel ('Frequency', fontsize = 10)
axs[0].set_xlabel ('Temperature [deg C]', fontsize = 10)

axs[1].hist(t_heatC, bin02, edgecolor="k")
axs[1].set_title('Sensor C with 50 bin', fontsize = 15)
axs[1].tick_params(labelsize=10)
axs[1].set_ylabel ('Frequency', fontsize = 10)
axs[1].set_xlabel ('Temperature [deg C]', fontsize = 10)

fig, axs = plt.subplots(nrows=1, ncols=2)
axs = axs.flatten()
axs[0].hist(t_heatD, bin01, edgecolor="k")
axs[0].set_title('Sensor D with 5 bin', fontsize = 15)
axs[0].tick_params(labelsize=10)
axs[0].set_ylabel ('Frequency', fontsize = 10)
axs[0].set_xlabel ('Temperature [deg C]', fontsize = 10)

axs[1].hist(t_heatD, bin02, edgecolor="k")
axs[1].set_title('Sensor D with 50 bin', fontsize = 15)
axs[1].tick_params(labelsize=10)
axs[1].set_ylabel ('Frequency', fontsize = 10)
axs[1].set_xlabel ('Temperature [deg C]', fontsize = 10)

fig, axs = plt.subplots(nrows=1, ncols=2)
axs = axs.flatten()
axs[0].hist(t_heatE, bin01, edgecolor="k")
axs[0].set_title('Sensor E with 5 bin', fontsize = 15)
axs[0].tick_params(labelsize=10)
axs[0].set_ylabel ('Frequency', fontsize = 10)
axs[0].set_xlabel ('Temperature [deg C]', fontsize = 10)

axs[1].hist(t_heatE, bin02, edgecolor="k")
axs[1].set_title('Sensor E with 50 bin', fontsize = 15)
axs[1].tick_params(labelsize=10)
axs[1].set_ylabel ('Frequency', fontsize = 10)
axs[1].set_xlabel ('Temperature [deg C]', fontsize = 10)

plt.show()

##Create 1 plot where frequency poligons for the 5 sensors Temperature values overlap in different colors with a legend.

fs = 14
fig, axs = plt.subplots()
[frequency1,bins]=np.histogram(t_heatA, bins=27)
[frequency2,bins]=np.histogram(t_heatB, bins=27)
[frequency3,bins]=np.histogram(t_heatC, bins=27)
[frequency4,bins]=np.histogram(t_heatD, bins=27)
[frequency5,bins]=np.histogram(t_heatE, bins=27)

axs.plot(bins[:-1],frequency1, label = 'Sensor Heat A')
axs.plot(bins[:-1],frequency2, label = 'Sensor Heat B')
axs.plot(bins[:-1],frequency3, label = 'Sensor Heat C')
axs.plot(bins[:-1],frequency4, label = 'Sensor Heat D')
axs.plot(bins[:-1],frequency5, label = 'Sensor Heat E')

axs.set_ylabel('Frequency Polygon',fontsize=fs)
axs.set_xlabel('Temperature [deg C]',fontsize=fs)
axs.tick_params(labelsize=fs)
axs.set_title('Frequency Polygon for Temperature Variable in Each Sensors', fontsize= 17)
axs.legend()
plt.show()

##Generate 3 plots that include the 5 sensors boxplot for: Wind Speed, Wind Direction and Temperature.

fig, ax = plt.subplots(3)

temp = [t_heatA, t_heatB, t_heatC, t_heatD, t_heatE]
ax[0].boxplot(temp)
ax[0].set_title('Temperature [deg C]', color = 'red')
ax[0].set_xticklabels(['sensor A', 'sensor B', 'sensor C', 'sensor D', 'sensor E',], fontsize = 8) 

ws = [ws_heatA, ws_heatB, ws_heatC, ws_heatD, ws_heatE]
ax[1].boxplot(ws)
ax[1].set_title('Wind Speed [m/s]', color = 'red')
ax[1].set_xticklabels(['sensor A', 'sensor B', 'sensor C', 'sensor D', 'sensor E',], fontsize = 8) 

wd = [wd_heatA, wd_heatB, wd_heatC, wd_heatD, wd_heatE]
ax[2].boxplot(wd)
ax[2].set_title('Wind Direction [deg]', color = 'red')
ax[2].set_xticklabels(['sensor A', 'sensor B', 'sensor C', 'sensor D', 'sensor E',], fontsize = 8) 

plt.show()

#After Lesson A2
##Plot PMF, PDF and CDF for the 5 sensors Temperature values in independent plots (or subplots). 
t_heatA_pmf = thinkstats2.Pmf(t_heatA)
t_heatB_pmf = thinkstats2.Pmf(t_heatB)
t_heatC_pmf = thinkstats2.Pmf(t_heatC)
t_heatD_pmf = thinkstats2.Pmf(t_heatD)
t_heatE_pmf = thinkstats2.Pmf(t_heatE)
thinkplot.SubPlot(1, 3, 2)
thinkplot.Pmf(t_heatA_pmf, color = 'blue', label = 'sensor A')
thinkplot.Config(xlabel = 'temperature', ylabel = 'pmf')
thinkplot.SubPlot(2, 3, 2)
thinkplot.Pmf(t_heatB_pmf, color = 'orange', label = 'sensor B')
thinkplot.Config(xlabel = 'temperature', ylabel = 'pmf')
thinkplot.SubPlot(3, 3, 2)
thinkplot.Pmf(t_heatC_pmf, color = 'green', label = 'sensor C')
thinkplot.Config(xlabel = 'temperature', ylabel = 'pmf')
thinkplot.SubPlot(4, 3, 2)
thinkplot.Pmf(t_heatD_pmf, color = 'red', label = 'sensor D')
thinkplot.Config(xlabel = 'temperature', ylabel = 'pmf')
thinkplot.SubPlot(5, 3, 2)
thinkplot.Pmf(t_heatE_pmf, color = 'purple', label = 'sensor E')
thinkplot.Config(xlabel = 'temperature', ylabel = 'pmf')
thinkplot.SubPlot(6, 3, 2)
thinkplot.Pmf(t_heatA_pmf, color = 'blue', label = 'sensor A', align = 'right')
thinkplot.Pmf(t_heatB_pmf, color = 'orange', label = 'sensor B', align = 'right')
thinkplot.Pmf(t_heatC_pmf, color = 'green', label = 'sensor C', align = 'right')
thinkplot.Pmf(t_heatD_pmf, color = 'red', label = 'sensor D', align = 'right')
thinkplot.Pmf(t_heatE_pmf, color = 'purple', label = 'sensor E', align = 'right')
thinkplot.Config(xlabel = 'temperature', ylabel = 'pmf')
thinkplot.Show()

t_heatA_mean = t_heatA.mean()
t_heatA_std = t_heatA.std()
t_heatA_pdf = thinkstats2.NormalPdf(t_heatA_mean, t_heatA_std)
t_heatB_mean = t_heatB.mean()
t_heatB_std = t_heatB.std()
t_heatB_pdf = thinkstats2.NormalPdf(t_heatB_mean, t_heatA_std)
t_heatC_mean = t_heatC.mean()
t_heatC_std = t_heatC.std()
t_heatC_pdf = thinkstats2.NormalPdf(t_heatC_mean, t_heatC_std)
t_heatD_mean = t_heatD.mean()
t_heatD_std = t_heatD.std()
t_heatD_pdf = thinkstats2.NormalPdf(t_heatD_mean, t_heatD_std)
t_heatE_mean = t_heatE.mean()
t_heatE_std = t_heatE.std()
t_heatE_pdf = thinkstats2.NormalPdf(t_heatE_mean, t_heatE_std)
thinkplot.SubPlot(1, 3, 2)
thinkplot.Pdf(t_heatA_pdf, color = 'blue', label = 'sensor A')
thinkplot.Config(xlabel = 'temperature', ylabel = 'pdf')
thinkplot.SubPlot(2, 3, 2)
thinkplot.Pdf(t_heatB_pdf, color = 'orange', label = 'sensor B')
thinkplot.Config(xlabel = 'temperature', ylabel = 'pdf')
thinkplot.SubPlot(3, 3, 2)
thinkplot.Pdf(t_heatC_pdf, color = 'green', label = 'sensor C')
thinkplot.Config(xlabel = 'temperature', ylabel = 'pdf')
thinkplot.SubPlot(4, 3, 2)
thinkplot.Pdf(t_heatD_pdf, color = 'red', label = 'sensor D')
thinkplot.Config(xlabel = 'temperature', ylabel = 'pdf')
thinkplot.SubPlot(5, 3, 2)
thinkplot.Pdf(t_heatE_pdf, color = 'purple', label = 'sensor E')
thinkplot.Config(xlabel = 'temperature', ylabel = 'pdf')
thinkplot.SubPlot(6, 3, 2)
thinkplot.Pdf(t_heatA_pdf, color = 'blue', label = 'sensor A')
thinkplot.Pdf(t_heatB_pdf, color = 'orange', label = 'sensor B')
thinkplot.Pdf(t_heatC_pdf, color = 'green', label = 'sensor C')
thinkplot.Pdf(t_heatD_pdf, color = 'red', label = 'sensor D')
thinkplot.Pdf(t_heatE_pdf, color = 'purple', label = 'sensor E')
thinkplot.Config(xlabel = 'temperature', ylabel = 'pdf')
thinkplot.Show()

t_heatA_cdf = thinkstats2.Cdf(t_heatA)
t_heatB_cdf = thinkstats2.Cdf(t_heatB)
t_heatC_cdf = thinkstats2.Cdf(t_heatC)
t_heatD_cdf = thinkstats2.Cdf(t_heatD)
t_heatE_cdf = thinkstats2.Cdf(t_heatE)
thinkplot.SubPlot(1, 3, 2)
thinkplot.Cdf(t_heatA_cdf, color = 'blue', label = 'sensor A')
thinkplot.Config(xlabel = 'temperature', ylabel = 'cdf')
thinkplot.SubPlot(2, 3, 2)
thinkplot.Cdf(t_heatB_cdf, color = 'orange', label = 'sensor B')
thinkplot.Config(xlabel = 'temperature', ylabel = 'cdf')
thinkplot.SubPlot(3, 3, 2)
thinkplot.Cdf(t_heatC_cdf, color = 'green', label = 'sensor C')
thinkplot.Config(xlabel = 'temperature', ylabel = 'cdf')
thinkplot.SubPlot(4, 3, 2)
thinkplot.Cdf(t_heatD_cdf, color = 'red', label = 'sensor D')
thinkplot.Config(xlabel = 'temperature', ylabel = 'cdf')
thinkplot.SubPlot(5, 3, 2)
thinkplot.Cdf(t_heatE_cdf, color = 'purple', label = 'sensor E')
thinkplot.Config(xlabel = 'temperature', ylabel = 'cdf')
thinkplot.SubPlot(6, 3, 2)
thinkplot.Cdf(t_heatA_cdf, color = 'blue', label = 'sensor A')
thinkplot.Cdf(t_heatB_cdf, color = 'orange', label = 'sensor B')
thinkplot.Cdf(t_heatC_cdf, color = 'green', label = 'sensor C')
thinkplot.Cdf(t_heatD_cdf, color = 'red', label = 'sensor D')
thinkplot.Cdf(t_heatE_cdf, color = 'purple', label = 'sensor E')
thinkplot.Config(xlabel = 'temperature', ylabel = 'cdf')
thinkplot.Show(xlabel = 'Temperature', ylabel = 'Cumulative Distribution Function')


##For the Wind Speed values, plot the pdf and the kernel density estimation. 
## PDF for Wind Speed
ws_heatA_mean = ws_heatA.mean()
ws_heatA_std = ws_heatA.std()
ws_heatA_pdf = thinkstats2.NormalPdf(ws_heatA_mean, ws_heatA_std)
ws_heatB_mean = ws_heatB.mean()
ws_heatB_std = ws_heatB.std()
ws_heatB_pdf = thinkstats2.NormalPdf(ws_heatB_mean, ws_heatA_std)
ws_heatC_mean = ws_heatC.mean()
ws_heatC_std = ws_heatC.std()
ws_heatC_pdf = thinkstats2.NormalPdf(ws_heatC_mean, ws_heatC_std)
ws_heatD_mean = ws_heatD.mean()
ws_heatD_std = ws_heatD.std()
ws_heatD_pdf = thinkstats2.NormalPdf(ws_heatD_mean, ws_heatD_std)
ws_heatE_mean = ws_heatE.mean()
ws_heatE_std = ws_heatE.std()
ws_heatE_pdf = thinkstats2.NormalPdf(ws_heatE_mean, ws_heatE_std)
thinkplot.SubPlot(1, 3, 2)
thinkplot.Pdf(ws_heatA_pdf, color = 'blue', label = 'sensor A')
thinkplot.Config(xlabel = 'wind speed', ylabel = 'pdf')
thinkplot.SubPlot(2, 3, 2)
thinkplot.Pdf(ws_heatB_pdf, color = 'orange', label = 'sensor B')
thinkplot.Config(xlabel = 'wind speed', ylabel = 'pdf')
thinkplot.SubPlot(3, 3, 2)
thinkplot.Pdf(ws_heatC_pdf, color = 'green', label = 'sensor C')
thinkplot.Config(xlabel = 'wind speed', ylabel = 'pdf')
thinkplot.SubPlot(4, 3, 2)
thinkplot.Pdf(ws_heatD_pdf, color = 'red', label = 'sensor D')
thinkplot.Config(xlabel = 'wind speed', ylabel = 'pdf')
thinkplot.SubPlot(5, 3, 2)
thinkplot.Pdf(ws_heatE_pdf, color = 'purple', label = 'sensor E')
thinkplot.Config(xlabel = 'wind speed', ylabel = 'pdf')
thinkplot.SubPlot(6, 3, 2)
thinkplot.Config(xlabel = 'wind speed', ylabel = 'pdf')
thinkplot.Pdf(ws_heatA_pdf, color = 'blue', label = 'sensor A')
thinkplot.Pdf(ws_heatB_pdf, color = 'orange', label = 'sensor B')
thinkplot.Pdf(ws_heatC_pdf, color = 'green', label = 'sensor C')
thinkplot.Pdf(ws_heatD_pdf, color = 'red', label = 'sensor D')
thinkplot.Pdf(ws_heatE_pdf, color = 'purple', label = 'sensor E')
thinkplot.Config(xlabel = 'wind speed', ylabel = 'pdf')
thinkplot.Show()
##KDE for Wind Speed
thinkplot.SubPlot(1, 3, 2)
ws_heatA_kde = thinkstats2.EstimatedPdf(ws_heatA)
thinkplot.Pdf(ws_heatA_kde, color = 'blue', label = 'sensor A')
thinkplot.Config(xlabel = 'wind speed', ylabel = 'kde')
thinkplot.SubPlot(2, 3, 2)
ws_heatB_kde = thinkstats2.EstimatedPdf(ws_heatB)
thinkplot.Pdf(ws_heatB_kde, color = 'orange', label = 'sensor B')
thinkplot.Config(xlabel = 'wind speed', ylabel = 'kde')
thinkplot.SubPlot(3, 3, 2)
ws_heatC_kde = thinkstats2.EstimatedPdf(ws_heatC)
thinkplot.Pdf(ws_heatC_kde, color = 'green', label = 'sensor C')
thinkplot.Config(xlabel = 'wind speed', ylabel = 'kde')
thinkplot.SubPlot(4, 3, 2)
ws_heatD_kde = thinkstats2.EstimatedPdf(ws_heatD)
thinkplot.Pdf(ws_heatD_kde, color = 'red', label = 'sensor D')
thinkplot.Config(xlabel = 'wind speed', ylabel = 'kde')
thinkplot.SubPlot(5, 3, 2)
ws_heatE_kde = thinkstats2.EstimatedPdf(ws_heatE)
thinkplot.Pdf(ws_heatE_kde, color = 'purple', label = 'sensor E')
thinkplot.Config(xlabel = 'wind speed', ylabel = 'kde')
thinkplot.SubPlot(6, 3, 2)
thinkplot.Pdf(ws_heatA_kde, color = 'blue', label = 'sensor A')
thinkplot.Pdf(ws_heatB_kde, color = 'orange', label = 'sensor B')
thinkplot.Pdf(ws_heatC_kde, color = 'green', label = 'sensor C')
thinkplot.Pdf(ws_heatD_kde, color = 'red', label = 'sensor D')
thinkplot.Pdf(ws_heatE_kde, color = 'purple', label = 'sensor E')
thinkplot.Config(xlabel = 'wind speed', ylabel = 'kde')
thinkplot.Show()


ws_heatA_mean = ws_heatA.mean()
ws_heatA_std = ws_heatA.std()
ws_heatA_pdf = thinkstats2.NormalPdf(ws_heatA_mean, ws_heatA_std)
ws_heatB_mean = ws_heatB.mean()
ws_heatB_std = ws_heatB.std()
ws_heatB_pdf = thinkstats2.NormalPdf(ws_heatB_mean, ws_heatA_std)
ws_heatC_mean = ws_heatC.mean()
ws_heatC_std = ws_heatC.std()
ws_heatC_pdf = thinkstats2.NormalPdf(ws_heatC_mean, ws_heatC_std)
ws_heatD_mean = ws_heatD.mean()
ws_heatD_std = ws_heatD.std()
ws_heatD_pdf = thinkstats2.NormalPdf(ws_heatD_mean, ws_heatD_std)
ws_heatE_mean = ws_heatE.mean()
ws_heatE_std = ws_heatE.std()
ws_heatE_pdf = thinkstats2.NormalPdf(ws_heatE_mean, ws_heatE_std)
thinkplot.SubPlot(1, 3, 2)
thinkplot.Pdf(ws_heatA_pdf, color = 'blue', label = 'sensor A')
thinkplot.Config(xlabel = 'wind speed', ylabel = 'pdf')
thinkplot.SubPlot(2, 3, 2)
thinkplot.Pdf(ws_heatB_pdf, color = 'orange', label = 'sensor B')
thinkplot.Config(xlabel = 'wind speed', ylabel = 'pdf')
thinkplot.SubPlot(3, 3, 2)
thinkplot.Pdf(ws_heatC_pdf, color = 'green', label = 'sensor C')
thinkplot.Config(xlabel = 'wind speed', ylabel = 'pdf')
thinkplot.SubPlot(4, 3, 2)
thinkplot.Pdf(ws_heatD_pdf, color = 'red', label = 'sensor D')
thinkplot.Config(xlabel = 'wind speed', ylabel = 'pdf')
thinkplot.SubPlot(5, 3, 2)
thinkplot.Pdf(ws_heatE_pdf, color = 'purple', label = 'sensor E')
thinkplot.Config(xlabel = 'wind speed', ylabel = 'pdf')
thinkplot.SubPlot(6, 3, 2)
thinkplot.Config(xlabel = 'wind speed', ylabel ='pdf')
thinkplot.Pdf(ws_heatA_pdf, color = 'blue', label = 'sensor A')
thinkplot.Pdf(ws_heatB_pdf, color = 'orange', label = 'sensor B')
thinkplot.Pdf(ws_heatC_pdf, color = 'green', label = 'sensor C')
thinkplot.Pdf(ws_heatD_pdf, color = 'red', label = 'sensor D')
thinkplot.Pdf(ws_heatE_pdf, color = 'purple', label = 'sensor E')
thinkplot.Config(xlabel = 'wind speed', ylabel = 'pdf')
thinkplot.Show()


#After lesson A3
##Temperature Correlation###
t_heatA2 = np.interp(np.linspace(0,len(t_heatC),len(t_heatC)),np.linspace(0,len(t_heatA),len(t_heatA)),t_heatA)
t_heatA3 = np.interp(np.linspace(0,len(t_heatD),len(t_heatD)),np.linspace(0,len(t_heatA),len(t_heatA)),t_heatA)
t_heatA4 = np.interp(np.linspace(0,len(t_heatE),len(t_heatE)),np.linspace(0,len(t_heatA),len(t_heatA)),t_heatA)
t_heatA2_normalized = (t_heatA2 - t_heatA2.mean())/t_heatA2.std()
t_heatA3_normalized = (t_heatA3 - t_heatA3.mean())/t_heatA3.std()
t_heatA4_normalized = (t_heatA4 - t_heatA4.mean())/t_heatA4.std()
t_heatA_normalized = (t_heatA - t_heatA.mean())/t_heatA.std()
t_heatB_normalized = (t_heatB - t_heatB.mean())/t_heatB.std()
t_heatC_normalized = (t_heatC - t_heatC.mean())/t_heatC.std()
t_heatD_normalized = (t_heatD - t_heatD.mean())/t_heatD.std()
t_heatE_normalized = (t_heatE - t_heatE.mean())/t_heatE.std()

t_heatB1 = np.interp(np.linspace(0,len(t_heatC),len(t_heatC)),np.linspace(0,len(t_heatB),len(t_heatB)),t_heatB)
t_heatB2 = np.interp(np.linspace(0,len(t_heatD),len(t_heatD)),np.linspace(0,len(t_heatB),len(t_heatB)),t_heatB)
t_heatB3 = np.interp(np.linspace(0,len(t_heatE),len(t_heatE)),np.linspace(0,len(t_heatB),len(t_heatB)),t_heatB)
t_heatB1_normalized = (t_heatB1 - t_heatB1.mean())/t_heatB1.std()
t_heatB2_normalized = (t_heatB2 - t_heatB2.mean())/t_heatB2.std()
t_heatB3_normalized = (t_heatB3 - t_heatB3.mean())/t_heatB3.std()

t_heatC2 = np.interp(np.linspace(0,len(t_heatE),len(t_heatE)),np.linspace(0,len(t_heatC),len(t_heatC)),t_heatC)
t_heatC2_normalized = (t_heatC2 - t_heatC2.mean())/t_heatC2.std()

t_heatD1 = np.interp(np.linspace(0,len(t_heatE),len(t_heatE)),np.linspace(0,len(t_heatD),len(t_heatD)),t_heatD)
t_heatD1_normalized = (t_heatD1 - t_heatD1.mean())/t_heatD1.std()

pecoef_AB = stats.pearsonr(t_heatA_normalized,t_heatB_normalized)
spcoef_AB = stats.spearmanr(t_heatA_normalized,t_heatB_normalized)
pecoef_AC = stats.pearsonr(t_heatA2_normalized,t_heatC_normalized)
spcoef_AC = stats.spearmanr(t_heatA2_normalized,t_heatC_normalized)
pecoef_AD = stats.pearsonr(t_heatA3_normalized,t_heatD_normalized)
spcoef_AD = stats.spearmanr(t_heatA3_normalized,t_heatD_normalized)
pecoef_AE = stats.pearsonr(t_heatA4_normalized,t_heatE_normalized)
spcoef_AE = stats.spearmanr(t_heatA4_normalized,t_heatE_normalized)

pecoef_BC = stats.pearsonr(t_heatB1_normalized,t_heatC_normalized)
spcoef_BC = stats.spearmanr(t_heatB1_normalized,t_heatC_normalized)
pecoef_BD = stats.pearsonr(t_heatB2_normalized,t_heatD_normalized)
spcoef_BD = stats.spearmanr(t_heatB2_normalized,t_heatD_normalized)
pecoef_BE = stats.pearsonr(t_heatB3_normalized,t_heatE_normalized)
spcoef_BE = stats.spearmanr(t_heatB3_normalized,t_heatE_normalized)

pecoef_CD = stats.pearsonr(t_heatC_normalized,t_heatD_normalized)
spcoef_CD = stats.spearmanr(t_heatC_normalized,t_heatD_normalized)
pecoef_CE = stats.pearsonr(t_heatC2_normalized,t_heatE_normalized)
spcoef_CE = stats.spearmanr(t_heatC2_normalized,t_heatE_normalized)

pecoef_DE = stats.pearsonr(t_heatD1_normalized,t_heatE_normalized)
spcoef_DE = stats.spearmanr(t_heatD1_normalized,t_heatE_normalized)

print('Pearson and Spearman Correlation for Temperature Variable for 5 Sensors :' )
print('Correlation A-B, A-C, A-D, A-E')
print('Pearson Corr  :', pecoef_AB, pecoef_AC, pecoef_AD, pecoef_AE)
print('Spearman Coor :', spcoef_AB, spcoef_AC, spcoef_AD, spcoef_AE)
print('Correlation B-C, B-D, B-E')
print('Pearson Corr  :', pecoef_BC, pecoef_BD, pecoef_DE)
print('Spearman Coor :', spcoef_BC, spcoef_BD, spcoef_DE)
print('Correlation C-D, C-E')
print('Pearson Corr  :', pecoef_CD, pecoef_CE)
print('Spearman Coor :', spcoef_CD, spcoef_CE)
print('Correlation D-E')
print('Pearson Corr  :', pecoef_DE)
print('Spearman Coor :', spcoef_DE)
print('\n')

pecoef_AB = list(pecoef_AB); pecoef_AC = list(pecoef_AC); pecoef_AD = list(pecoef_AD); pecoef_AE = list(pecoef_AE); pecoef_BC = list(pecoef_BC)
pecoef_BD = list(pecoef_BD); pecoef_BE = list(pecoef_BE); pecoef_CD = list(pecoef_CD); pecoef_CE = list(pecoef_CE); pecoef_DE = list(pecoef_DE)
AB = pecoef_AB[0]; AC = pecoef_AC[0]; AD = pecoef_AD[0]; AE = pecoef_AE[0]; BC = pecoef_BC[0]
BD = pecoef_BD[0]; BE = pecoef_BE[0]; CD = pecoef_CD[0]; CE = pecoef_CE[0]; DE = pecoef_DE[0]
x = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
y = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
fig = plt.figure()
ax0 = fig.add_subplot()
ax0.scatter (x, y)
x_formatter = FixedFormatter(["AB", "AC", "AD", "AE", "BC", "BD", "BE", "CD", "CE", "DE"])
x_locator = FixedLocator([AB, AC, AD, AE, BC, BD, BE, CD, CE, DE])
ax0.xaxis.set_major_formatter (x_formatter)
ax0.xaxis.set_major_locator (x_locator)
ax0.set_ylabel ('Pearson Correlation Coefficient', fontsize = 14)
ax0.set_xlabel ('Sensors', fontsize = 14)
ax0.set_title ('Temperature Variable', fontsize = 18)
plt.xticks (rotation = 90)


spcoef_AB = list(spcoef_AB); spcoef_AC = list(spcoef_AC); spcoef_AD = list(spcoef_AD); spcoef_AE = list(spcoef_AE); spcoef_BC = list(spcoef_BC)
spcoef_BD = list(spcoef_BD); spcoef_BE = list(spcoef_BE); spcoef_CD = list(spcoef_CD); spcoef_CE = list(spcoef_CE); spcoef_DE = list(spcoef_DE)
AB = spcoef_AB[0]; AC = spcoef_AC[0]; AD = spcoef_AD[0]; AE = spcoef_AE[0]; BC = spcoef_BC[0]
BD = spcoef_BD[0]; BE = spcoef_BE[0]; CD = spcoef_CD[0]; CE = spcoef_CE[0]; DE = spcoef_DE[0]
x = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
y = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
fig = plt.figure()
ax1 = fig.add_subplot(111)
ax1.scatter (x, y)
x_formatter = FixedFormatter(["AB", "AC", "AD", "AE", "BC", "BD", "BE", "CD", "CE", "DE"])
x_locator = FixedLocator([AB, AC, AD, AE, BC, BD, BE, CD, CE, DE])
ax1.xaxis.set_major_formatter (x_formatter)
ax1.xaxis.set_major_locator (x_locator)
ax1.set_ylabel ('Spearman Correlation Coefficient', fontsize = 14)
ax1.set_xlabel ('Sensors', fontsize = 14)
ax1.set_title ('Temperature Variable', fontsize = 18)
plt.xticks (rotation = 90)
plt.show()

##Wet Bulb Globe Temperature###
wbgt_heatA2 = np.interp(np.linspace(0,len(wbgt_heatC),len(wbgt_heatC)),np.linspace(0,len(wbgt_heatA),len(wbgt_heatA)),wbgt_heatA)
wbgt_heatA3 = np.interp(np.linspace(0,len(wbgt_heatD),len(wbgt_heatD)),np.linspace(0,len(wbgt_heatA),len(wbgt_heatA)),wbgt_heatA)
wbgt_heatA4 = np.interp(np.linspace(0,len(wbgt_heatE),len(wbgt_heatE)),np.linspace(0,len(wbgt_heatA),len(wbgt_heatA)),wbgt_heatA)
wbgt_heatA2_normalized = (wbgt_heatA2 - wbgt_heatA2.mean())/wbgt_heatA2.std()
wbgt_heatA3_normalized = (wbgt_heatA3 - wbgt_heatA3.mean())/wbgt_heatA3.std()
wbgt_heatA4_normalized = (wbgt_heatA4 - wbgt_heatA4.mean())/wbgt_heatA4.std()
wbgt_heatA_normalized = (wbgt_heatA - wbgt_heatA.mean())/wbgt_heatA.std()
wbgt_heatB_normalized = (wbgt_heatB - wbgt_heatB.mean())/wbgt_heatB.std()
wbgt_heatC_normalized = (wbgt_heatC - wbgt_heatC.mean())/wbgt_heatC.std()
wbgt_heatD_normalized = (wbgt_heatD - wbgt_heatD.mean())/wbgt_heatD.std()
wbgt_heatE_normalized = (wbgt_heatE - wbgt_heatE.mean())/wbgt_heatE.std()

wbgt_heatB1 = np.interp(np.linspace(0,len(wbgt_heatC),len(wbgt_heatC)),np.linspace(0,len(wbgt_heatB),len(wbgt_heatB)),wbgt_heatB)
wbgt_heatB2 = np.interp(np.linspace(0,len(wbgt_heatD),len(wbgt_heatD)),np.linspace(0,len(wbgt_heatB),len(wbgt_heatB)),wbgt_heatB)
wbgt_heatB3 = np.interp(np.linspace(0,len(wbgt_heatE),len(wbgt_heatE)),np.linspace(0,len(wbgt_heatB),len(wbgt_heatB)),wbgt_heatB)
wbgt_heatB1_normalized = (wbgt_heatB1 - wbgt_heatB1.mean())/wbgt_heatB1.std()
wbgt_heatB2_normalized = (wbgt_heatB2 - wbgt_heatB2.mean())/wbgt_heatB2.std()
wbgt_heatB3_normalized = (wbgt_heatB3 - wbgt_heatB3.mean())/wbgt_heatB3.std()

wbgt_heatC2 = np.interp(np.linspace(0,len(wbgt_heatE),len(wbgt_heatE)),np.linspace(0,len(wbgt_heatC),len(wbgt_heatC)),wbgt_heatC)
wbgt_heatC2_normalized = (wbgt_heatC2 - wbgt_heatC2.mean())/wbgt_heatC2.std()

wbgt_heatD1 = np.interp(np.linspace(0,len(wbgt_heatE),len(wbgt_heatE)),np.linspace(0,len(wbgt_heatD),len(wbgt_heatD)),wbgt_heatD)
wbgt_heatD1_normalized = (wbgt_heatD1 - wbgt_heatD1.mean())/wbgt_heatD1.std()

pecoef_AB = stats.pearsonr(wbgt_heatA_normalized,wbgt_heatB_normalized)
spcoef_AB = stats.spearmanr(wbgt_heatA_normalized,wbgt_heatB_normalized)
pecoef_AC = stats.pearsonr(wbgt_heatA2_normalized,wbgt_heatC_normalized)
spcoef_AC = stats.spearmanr(wbgt_heatA2_normalized,wbgt_heatC_normalized)
pecoef_AD = stats.pearsonr(wbgt_heatA3_normalized,wbgt_heatD_normalized)
spcoef_AD = stats.spearmanr(wbgt_heatA3_normalized,wbgt_heatD_normalized)
pecoef_AE = stats.pearsonr(wbgt_heatA4_normalized,wbgt_heatE_normalized)
spcoef_AE = stats.spearmanr(wbgt_heatA4_normalized,wbgt_heatE_normalized)

pecoef_BC = stats.pearsonr(wbgt_heatB1_normalized,wbgt_heatC_normalized)
spcoef_BC = stats.spearmanr(wbgt_heatB1_normalized,wbgt_heatC_normalized)
pecoef_BD = stats.pearsonr(wbgt_heatB2_normalized,wbgt_heatD_normalized)
spcoef_BD = stats.spearmanr(wbgt_heatB2_normalized,wbgt_heatD_normalized)
pecoef_BE = stats.pearsonr(wbgt_heatB3_normalized,wbgt_heatE_normalized)
spcoef_BE = stats.spearmanr(wbgt_heatB3_normalized,wbgt_heatE_normalized)

pecoef_CD = stats.pearsonr(wbgt_heatC_normalized,wbgt_heatD_normalized)
spcoef_CD = stats.spearmanr(wbgt_heatC_normalized,wbgt_heatD_normalized)
pecoef_CE = stats.pearsonr(wbgt_heatC2_normalized,wbgt_heatE_normalized)
spcoef_CE = stats.spearmanr(wbgt_heatC2_normalized,wbgt_heatE_normalized)

pecoef_DE = stats.pearsonr(wbgt_heatD1_normalized,wbgt_heatE_normalized)
spcoef_DE = stats.spearmanr(wbgt_heatD1_normalized,wbgt_heatE_normalized)

print('Pearson and Spearman Correlation for Wet Bulb Globe Temperature Variable for 5 Sensors :' )
print('Correlation A-B, A-C, A-D, A-E')
print('Pearson Corr  :', pecoef_AB, pecoef_AC, pecoef_AD, pecoef_AE)
print('Spearman Coor :', spcoef_AB, spcoef_AC, spcoef_AD, spcoef_AE)
print('Correlation B-C, B-D, B-E')
print('Pearson Corr  :', pecoef_BC, pecoef_BD, pecoef_DE)
print('Spearman Coor :', spcoef_BC, spcoef_BD, spcoef_DE)
print('Correlation C-D, C-E')
print('Pearson Corr  :', pecoef_CD, pecoef_CE)
print('Spearman Coor :', spcoef_CD, spcoef_CE)
print('Correlation D-E')
print('Pearson Corr  :', pecoef_DE)
print('Spearman Coor :', spcoef_DE)
print('\n')

pecoef_AB = list(pecoef_AB); pecoef_AC = list(pecoef_AC); pecoef_AD = list(pecoef_AD); pecoef_AE = list(pecoef_AE); pecoef_BC = list(pecoef_BC)
pecoef_BD = list(pecoef_BD); pecoef_BE = list(pecoef_BE); pecoef_CD = list(pecoef_CD); pecoef_CE = list(pecoef_CE); pecoef_DE = list(pecoef_DE)
AB = pecoef_AB[0]; AC = pecoef_AC[0]; AD = pecoef_AD[0]; AE = pecoef_AE[0]; BC = pecoef_BC[0]
BD = pecoef_BD[0]; BE = pecoef_BE[0]; CD = pecoef_CD[0]; CE = pecoef_CE[0]; DE = pecoef_DE[0]
x = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
y = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
fig = plt.figure()
ax0 = fig.add_subplot(111)
ax0.scatter (x, y)
x_formatter = FixedFormatter(["AB", "AC", "AD", "AE", "BC", "BD", "BE", "CD", "CE", "DE"])
x_locator = FixedLocator([AB, AC, AD, AE, BC, BD, BE, CD, CE, DE])
ax0.xaxis.set_major_formatter (x_formatter)
ax0.xaxis.set_major_locator (x_locator)
ax0.set_ylabel ('Pearson Correlation Coefficient', fontsize = 14)
ax0.set_xlabel ('Sensors', fontsize = 14)
ax0.set_title ('Wet Bulb Globe Temperature Variable', fontsize = 18)
plt.xticks (rotation = 90)

spcoef_AB = list(spcoef_AB); spcoef_AC = list(spcoef_AC); spcoef_AD = list(spcoef_AD); spcoef_AE = list(spcoef_AE); spcoef_BC = list(spcoef_BC)
spcoef_BD = list(spcoef_BD); spcoef_BE = list(spcoef_BE); spcoef_CD = list(spcoef_CD); spcoef_CE = list(spcoef_CE); spcoef_DE = list(spcoef_DE)
AB = spcoef_AB[0]; AC = spcoef_AC[0]; AD = spcoef_AD[0]; AE = spcoef_AE[0]; BC = spcoef_BC[0]
BD = spcoef_BD[0]; BE = spcoef_BE[0]; CD = spcoef_CD[0]; CE = spcoef_CE[0]; DE = spcoef_DE[0]
x = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
y = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
fig = plt.figure()
ax1 = fig.add_subplot(111)
ax1.scatter (x, y)
x_formatter = FixedFormatter(["AB", "AC", "AD", "AE", "BC", "BD", "BE", "CD", "CE", "DE"])
x_locator = FixedLocator([AB, AC, AD, AE, BC, BD, BE, CD, CE, DE])
ax1.xaxis.set_major_formatter (x_formatter)
ax1.xaxis.set_major_locator (x_locator)
ax1.set_ylabel ('Spearman Correlation Coefficient', fontsize = 14)
ax1.set_xlabel ('Sensors', fontsize = 14)
ax1.set_title ('Wet Bulb Globe Temperature Variable', fontsize = 18)
plt.xticks (rotation = 90)
plt.show()

#After Lesson A3
##Compute the correlations between all the sensors for the variables: 
## Temperature, Wet Bulb Globe Temperature (WBGT), Crosswind Speed. Use Pearson’s and Spearmann’s rank coefficients. 
## Make a scatter plot with both coefficients with the 3 variables.
##Temperature###
t_heatA2 = np.interp(np.linspace(0,len(t_heatC),len(t_heatC)),np.linspace(0,len(t_heatA),len(t_heatA)),t_heatA)
t_heatA3 = np.interp(np.linspace(0,len(t_heatD),len(t_heatD)),np.linspace(0,len(t_heatA),len(t_heatA)),t_heatA)
t_heatA4 = np.interp(np.linspace(0,len(t_heatE),len(t_heatE)),np.linspace(0,len(t_heatA),len(t_heatA)),t_heatA)
t_heatA2_normalized = (t_heatA2 - t_heatA2.mean())/t_heatA2.std()
t_heatA3_normalized = (t_heatA3 - t_heatA3.mean())/t_heatA3.std()
t_heatA4_normalized = (t_heatA4 - t_heatA4.mean())/t_heatA4.std()
t_heatA_normalized = (t_heatA - t_heatA.mean())/t_heatA.std()
t_heatB_normalized = (t_heatB - t_heatB.mean())/t_heatB.std()
t_heatC_normalized = (t_heatC - t_heatC.mean())/t_heatC.std()
t_heatD_normalized = (t_heatD - t_heatD.mean())/t_heatD.std()
t_heatE_normalized = (t_heatE - t_heatE.mean())/t_heatE.std()

t_heatB1 = np.interp(np.linspace(0,len(t_heatC),len(t_heatC)),np.linspace(0,len(t_heatB),len(t_heatB)),t_heatB)
t_heatB2 = np.interp(np.linspace(0,len(t_heatD),len(t_heatD)),np.linspace(0,len(t_heatB),len(t_heatB)),t_heatB)
t_heatB3 = np.interp(np.linspace(0,len(t_heatE),len(t_heatE)),np.linspace(0,len(t_heatB),len(t_heatB)),t_heatB)
t_heatB1_normalized = (t_heatB1 - t_heatB1.mean())/t_heatB1.std()
t_heatB2_normalized = (t_heatB2 - t_heatB2.mean())/t_heatB2.std()
t_heatB3_normalized = (t_heatB3 - t_heatB3.mean())/t_heatB3.std()

t_heatC2 = np.interp(np.linspace(0,len(t_heatE),len(t_heatE)),np.linspace(0,len(t_heatC),len(t_heatC)),t_heatC)
t_heatC2_normalized = (t_heatC2 - t_heatC2.mean())/t_heatC2.std()

t_heatD1 = np.interp(np.linspace(0,len(t_heatE),len(t_heatE)),np.linspace(0,len(t_heatD),len(t_heatD)),t_heatD)
t_heatD1_normalized = (t_heatD1 - t_heatD1.mean())/t_heatD1.std()

pecoef_AB = stats.pearsonr(t_heatA_normalized,t_heatB_normalized)
spcoef_AB = stats.spearmanr(t_heatA_normalized,t_heatB_normalized)
pecoef_AC = stats.pearsonr(t_heatA2_normalized,t_heatC_normalized)
spcoef_AC = stats.spearmanr(t_heatA2_normalized,t_heatC_normalized)
pecoef_AD = stats.pearsonr(t_heatA3_normalized,t_heatD_normalized)
spcoef_AD = stats.spearmanr(t_heatA3_normalized,t_heatD_normalized)
pecoef_AE = stats.pearsonr(t_heatA4_normalized,t_heatE_normalized)
spcoef_AE = stats.spearmanr(t_heatA4_normalized,t_heatE_normalized)

pecoef_BC = stats.pearsonr(t_heatB1_normalized,t_heatC_normalized)
spcoef_BC = stats.spearmanr(t_heatB1_normalized,t_heatC_normalized)
pecoef_BD = stats.pearsonr(t_heatB2_normalized,t_heatD_normalized)
spcoef_BD = stats.spearmanr(t_heatB2_normalized,t_heatD_normalized)
pecoef_BE = stats.pearsonr(t_heatB3_normalized,t_heatE_normalized)
spcoef_BE = stats.spearmanr(t_heatB3_normalized,t_heatE_normalized)

pecoef_CD = stats.pearsonr(t_heatC_normalized,t_heatD_normalized)
spcoef_CD = stats.spearmanr(t_heatC_normalized,t_heatD_normalized)
pecoef_CE = stats.pearsonr(t_heatC2_normalized,t_heatE_normalized)
spcoef_CE = stats.spearmanr(t_heatC2_normalized,t_heatE_normalized)

pecoef_DE = stats.pearsonr(t_heatD1_normalized,t_heatE_normalized)
spcoef_DE = stats.spearmanr(t_heatD1_normalized,t_heatE_normalized)

print('Pearson and Spearman Correlation for Temperature Variable for 5 Sensors :' )
print('Correlation A-B, A-C, A-D, A-E')
print('Pearson Corr  :', pecoef_AB, pecoef_AC, pecoef_AD, pecoef_AE)
print('Spearman Coor :', spcoef_AB, spcoef_AC, spcoef_AD, spcoef_AE)
print('Correlation B-C, B-D, B-E')
print('Pearson Corr  :', pecoef_BC, pecoef_BD, pecoef_DE)
print('Spearman Coor :', spcoef_BC, spcoef_BD, spcoef_DE)
print('Correlation C-D, C-E')
print('Pearson Corr  :', pecoef_CD, pecoef_CE)
print('Spearman Coor :', spcoef_CD, spcoef_CE)
print('Correlation D-E')
print('Pearson Corr  :', pecoef_DE)
print('Spearman Coor :', spcoef_DE)
print('\n')

pecoef_AB = list(pecoef_AB); pecoef_AC = list(pecoef_AC); pecoef_AD = list(pecoef_AD); pecoef_AE = list(pecoef_AE); pecoef_BC = list(pecoef_BC)
pecoef_BD = list(pecoef_BD); pecoef_BE = list(pecoef_BE); pecoef_CD = list(pecoef_CD); pecoef_CE = list(pecoef_CE); pecoef_DE = list(pecoef_DE)
AB = pecoef_AB[0]; AC = pecoef_AC[0]; AD = pecoef_AD[0]; AE = pecoef_AE[0]; BC = pecoef_BC[0]
BD = pecoef_BD[0]; BE = pecoef_BE[0]; CD = pecoef_CD[0]; CE = pecoef_CE[0]; DE = pecoef_DE[0]
x = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
y = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
fig = plt.figure()
ax0 = fig.add_subplot()
ax0.scatter (x, y)
x_formatter = FixedFormatter(["AB", "AC", "AD", "AE", "BC", "BD", "BE", "CD", "CE", "DE"])
x_locator = FixedLocator([AB, AC, AD, AE, BC, BD, BE, CD, CE, DE])
ax0.xaxis.set_major_formatter (x_formatter)
ax0.xaxis.set_major_locator (x_locator)
ax0.set_ylabel ('Pearson Correlation Coefficient', fontsize = 14)
ax0.set_xlabel ('Sensors', fontsize = 14)
ax0.set_title ('Temperature Variable', fontsize = 18)
plt.xticks (rotation = 90)


spcoef_AB = list(spcoef_AB); spcoef_AC = list(spcoef_AC); spcoef_AD = list(spcoef_AD); spcoef_AE = list(spcoef_AE); spcoef_BC = list(spcoef_BC)
spcoef_BD = list(spcoef_BD); spcoef_BE = list(spcoef_BE); spcoef_CD = list(spcoef_CD); spcoef_CE = list(spcoef_CE); spcoef_DE = list(spcoef_DE)
AB = spcoef_AB[0]; AC = spcoef_AC[0]; AD = spcoef_AD[0]; AE = spcoef_AE[0]; BC = spcoef_BC[0]
BD = spcoef_BD[0]; BE = spcoef_BE[0]; CD = spcoef_CD[0]; CE = spcoef_CE[0]; DE = spcoef_DE[0]
x = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
y = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
fig = plt.figure()
ax1 = fig.add_subplot(111)
ax1.scatter (x, y)
x_formatter = FixedFormatter(["AB", "AC", "AD", "AE", "BC", "BD", "BE", "CD", "CE", "DE"])
x_locator = FixedLocator([AB, AC, AD, AE, BC, BD, BE, CD, CE, DE])
ax1.xaxis.set_major_formatter (x_formatter)
ax1.xaxis.set_major_locator (x_locator)
ax1.set_ylabel ('Spearman Correlation Coefficient', fontsize = 14)
ax1.set_xlabel ('Sensors', fontsize = 14)
ax1.set_title ('Temperature Variable', fontsize = 18)
plt.xticks (rotation = 90)
plt.show()

##Wet Bulb Globe Temperature###
wbgt_heatA2 = np.interp(np.linspace(0,len(wbgt_heatC),len(wbgt_heatC)),np.linspace(0,len(wbgt_heatA),len(wbgt_heatA)),wbgt_heatA)
wbgt_heatA3 = np.interp(np.linspace(0,len(wbgt_heatD),len(wbgt_heatD)),np.linspace(0,len(wbgt_heatA),len(wbgt_heatA)),wbgt_heatA)
wbgt_heatA4 = np.interp(np.linspace(0,len(wbgt_heatE),len(wbgt_heatE)),np.linspace(0,len(wbgt_heatA),len(wbgt_heatA)),wbgt_heatA)
wbgt_heatA2_normalized = (wbgt_heatA2 - wbgt_heatA2.mean())/wbgt_heatA2.std()
wbgt_heatA3_normalized = (wbgt_heatA3 - wbgt_heatA3.mean())/wbgt_heatA3.std()
wbgt_heatA4_normalized = (wbgt_heatA4 - wbgt_heatA4.mean())/wbgt_heatA4.std()
wbgt_heatA_normalized = (wbgt_heatA - wbgt_heatA.mean())/wbgt_heatA.std()
wbgt_heatB_normalized = (wbgt_heatB - wbgt_heatB.mean())/wbgt_heatB.std()
wbgt_heatC_normalized = (wbgt_heatC - wbgt_heatC.mean())/wbgt_heatC.std()
wbgt_heatD_normalized = (wbgt_heatD - wbgt_heatD.mean())/wbgt_heatD.std()
wbgt_heatE_normalized = (wbgt_heatE - wbgt_heatE.mean())/wbgt_heatE.std()

wbgt_heatB1 = np.interp(np.linspace(0,len(wbgt_heatC),len(wbgt_heatC)),np.linspace(0,len(wbgt_heatB),len(wbgt_heatB)),wbgt_heatB)
wbgt_heatB2 = np.interp(np.linspace(0,len(wbgt_heatD),len(wbgt_heatD)),np.linspace(0,len(wbgt_heatB),len(wbgt_heatB)),wbgt_heatB)
wbgt_heatB3 = np.interp(np.linspace(0,len(wbgt_heatE),len(wbgt_heatE)),np.linspace(0,len(wbgt_heatB),len(wbgt_heatB)),wbgt_heatB)
wbgt_heatB1_normalized = (wbgt_heatB1 - wbgt_heatB1.mean())/wbgt_heatB1.std()
wbgt_heatB2_normalized = (wbgt_heatB2 - wbgt_heatB2.mean())/wbgt_heatB2.std()
wbgt_heatB3_normalized = (wbgt_heatB3 - wbgt_heatB3.mean())/wbgt_heatB3.std()

wbgt_heatC2 = np.interp(np.linspace(0,len(wbgt_heatE),len(wbgt_heatE)),np.linspace(0,len(wbgt_heatC),len(wbgt_heatC)),wbgt_heatC)
wbgt_heatC2_normalized = (wbgt_heatC2 - wbgt_heatC2.mean())/wbgt_heatC2.std()

wbgt_heatD1 = np.interp(np.linspace(0,len(wbgt_heatE),len(wbgt_heatE)),np.linspace(0,len(wbgt_heatD),len(wbgt_heatD)),wbgt_heatD)
wbgt_heatD1_normalized = (wbgt_heatD1 - wbgt_heatD1.mean())/wbgt_heatD1.std()

pecoef_AB = stats.pearsonr(wbgt_heatA_normalized,wbgt_heatB_normalized)
spcoef_AB = stats.spearmanr(wbgt_heatA_normalized,wbgt_heatB_normalized)
pecoef_AC = stats.pearsonr(wbgt_heatA2_normalized,wbgt_heatC_normalized)
spcoef_AC = stats.spearmanr(wbgt_heatA2_normalized,wbgt_heatC_normalized)
pecoef_AD = stats.pearsonr(wbgt_heatA3_normalized,wbgt_heatD_normalized)
spcoef_AD = stats.spearmanr(wbgt_heatA3_normalized,wbgt_heatD_normalized)
pecoef_AE = stats.pearsonr(wbgt_heatA4_normalized,wbgt_heatE_normalized)
spcoef_AE = stats.spearmanr(wbgt_heatA4_normalized,wbgt_heatE_normalized)

pecoef_BC = stats.pearsonr(wbgt_heatB1_normalized,wbgt_heatC_normalized)
spcoef_BC = stats.spearmanr(wbgt_heatB1_normalized,wbgt_heatC_normalized)
pecoef_BD = stats.pearsonr(wbgt_heatB2_normalized,wbgt_heatD_normalized)
spcoef_BD = stats.spearmanr(wbgt_heatB2_normalized,wbgt_heatD_normalized)
pecoef_BE = stats.pearsonr(wbgt_heatB3_normalized,wbgt_heatE_normalized)
spcoef_BE = stats.spearmanr(wbgt_heatB3_normalized,wbgt_heatE_normalized)

pecoef_CD = stats.pearsonr(wbgt_heatC_normalized,wbgt_heatD_normalized)
spcoef_CD = stats.spearmanr(wbgt_heatC_normalized,wbgt_heatD_normalized)
pecoef_CE = stats.pearsonr(wbgt_heatC2_normalized,wbgt_heatE_normalized)
spcoef_CE = stats.spearmanr(wbgt_heatC2_normalized,wbgt_heatE_normalized)

pecoef_DE = stats.pearsonr(wbgt_heatD1_normalized,wbgt_heatE_normalized)
spcoef_DE = stats.spearmanr(wbgt_heatD1_normalized,wbgt_heatE_normalized)

print('Pearson and Spearman Correlation for Wet Bulb Globe Temperature Variable for 5 Sensors :' )
print('Correlation A-B, A-C, A-D, A-E')
print('Pearson Corr  :', pecoef_AB, pecoef_AC, pecoef_AD, pecoef_AE)
print('Spearman Coor :', spcoef_AB, spcoef_AC, spcoef_AD, spcoef_AE)
print('Correlation B-C, B-D, B-E')
print('Pearson Corr  :', pecoef_BC, pecoef_BD, pecoef_DE)
print('Spearman Coor :', spcoef_BC, spcoef_BD, spcoef_DE)
print('Correlation C-D, C-E')
print('Pearson Corr  :', pecoef_CD, pecoef_CE)
print('Spearman Coor :', spcoef_CD, spcoef_CE)
print('Correlation D-E')
print('Pearson Corr  :', pecoef_DE)
print('Spearman Coor :', spcoef_DE)
print('\n')

pecoef_AB = list(pecoef_AB); pecoef_AC = list(pecoef_AC); pecoef_AD = list(pecoef_AD); pecoef_AE = list(pecoef_AE); pecoef_BC = list(pecoef_BC)
pecoef_BD = list(pecoef_BD); pecoef_BE = list(pecoef_BE); pecoef_CD = list(pecoef_CD); pecoef_CE = list(pecoef_CE); pecoef_DE = list(pecoef_DE)
AB = pecoef_AB[0]; AC = pecoef_AC[0]; AD = pecoef_AD[0]; AE = pecoef_AE[0]; BC = pecoef_BC[0]
BD = pecoef_BD[0]; BE = pecoef_BE[0]; CD = pecoef_CD[0]; CE = pecoef_CE[0]; DE = pecoef_DE[0]
x = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
y = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
fig = plt.figure()
ax0 = fig.add_subplot(111)
ax0.scatter (x, y)
x_formatter = FixedFormatter(["AB", "AC", "AD", "AE", "BC", "BD", "BE", "CD", "CE", "DE"])
x_locator = FixedLocator([AB, AC, AD, AE, BC, BD, BE, CD, CE, DE])
ax0.xaxis.set_major_formatter (x_formatter)
ax0.xaxis.set_major_locator (x_locator)
ax0.set_ylabel ('Pearson Correlation Coefficient', fontsize = 14)
ax0.set_xlabel ('Sensors', fontsize = 14)
ax0.set_title ('Wet Bulb Globe Temperature Variable', fontsize = 18)
plt.xticks (rotation = 90)

spcoef_AB = list(spcoef_AB); spcoef_AC = list(spcoef_AC); spcoef_AD = list(spcoef_AD); spcoef_AE = list(spcoef_AE); spcoef_BC = list(spcoef_BC)
spcoef_BD = list(spcoef_BD); spcoef_BE = list(spcoef_BE); spcoef_CD = list(spcoef_CD); spcoef_CE = list(spcoef_CE); spcoef_DE = list(spcoef_DE)
AB = spcoef_AB[0]; AC = spcoef_AC[0]; AD = spcoef_AD[0]; AE = spcoef_AE[0]; BC = spcoef_BC[0]
BD = spcoef_BD[0]; BE = spcoef_BE[0]; CD = spcoef_CD[0]; CE = spcoef_CE[0]; DE = spcoef_DE[0]
x = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
y = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
fig = plt.figure()
ax1 = fig.add_subplot(111)
ax1.scatter (x, y)
x_formatter = FixedFormatter(["AB", "AC", "AD", "AE", "BC", "BD", "BE", "CD", "CE", "DE"])
x_locator = FixedLocator([AB, AC, AD, AE, BC, BD, BE, CD, CE, DE])
ax1.xaxis.set_major_formatter (x_formatter)
ax1.xaxis.set_major_locator (x_locator)
ax1.set_ylabel ('Spearman Correlation Coefficient', fontsize = 14)
ax1.set_xlabel ('Sensors', fontsize = 14)
ax1.set_title ('Wet Bulb Globe Temperature Variable', fontsize = 18)
plt.xticks (rotation = 90)
plt.show()

##Crosswind Speed###
cws_heatA2 = np.interp(np.linspace(0,len(cws_heatC),len(cws_heatC)),np.linspace(0,len(cws_heatA),len(cws_heatA)),cws_heatA)
cws_heatA3 = np.interp(np.linspace(0,len(cws_heatD),len(cws_heatD)),np.linspace(0,len(cws_heatA),len(cws_heatA)),cws_heatA)
cws_heatA4 = np.interp(np.linspace(0,len(cws_heatE),len(cws_heatE)),np.linspace(0,len(cws_heatA),len(cws_heatA)),cws_heatA)
cws_heatA2_normalized = (cws_heatA2 - cws_heatA2.mean())/cws_heatA2.std()
cws_heatA3_normalized = (cws_heatA3 - cws_heatA3.mean())/cws_heatA3.std()
cws_heatA4_normalized = (cws_heatA4 - cws_heatA4.mean())/cws_heatA4.std()
cws_heatA_normalized = (cws_heatA - cws_heatA.mean())/cws_heatA.std()
cws_heatB_normalized = (cws_heatB - cws_heatB.mean())/cws_heatB.std()
cws_heatC_normalized = (cws_heatC - cws_heatC.mean())/cws_heatC.std()
cws_heatD_normalized = (cws_heatD - cws_heatD.mean())/cws_heatD.std()
cws_heatE_normalized = (cws_heatE - cws_heatE.mean())/cws_heatE.std()

cws_heatB1 = np.interp(np.linspace(0,len(cws_heatC),len(cws_heatC)),np.linspace(0,len(cws_heatB),len(cws_heatB)),cws_heatB)
cws_heatB2 = np.interp(np.linspace(0,len(cws_heatD),len(cws_heatD)),np.linspace(0,len(cws_heatB),len(cws_heatB)),cws_heatB)
cws_heatB3 = np.interp(np.linspace(0,len(cws_heatE),len(cws_heatE)),np.linspace(0,len(cws_heatB),len(cws_heatB)),cws_heatB)
cws_heatB1_normalized = (cws_heatB1 - cws_heatB1.mean())/cws_heatB1.std()
cws_heatB2_normalized = (cws_heatB2 - cws_heatB2.mean())/cws_heatB2.std()
cws_heatB3_normalized = (cws_heatB3 - cws_heatB3.mean())/cws_heatB3.std()

cws_heatC2 = np.interp(np.linspace(0,len(cws_heatE),len(cws_heatE)),np.linspace(0,len(cws_heatC),len(cws_heatC)),cws_heatC)
cws_heatC2_normalized = (cws_heatC2 - cws_heatC2.mean())/cws_heatC2.std()

cws_heatD1 = np.interp(np.linspace(0,len(cws_heatE),len(cws_heatE)),np.linspace(0,len(cws_heatD),len(cws_heatD)),cws_heatD)
cws_heatD1_normalized = (cws_heatD1 - cws_heatD1.mean())/cws_heatD1.std()

pecoef_AB = stats.pearsonr(cws_heatA_normalized,cws_heatB_normalized)
spcoef_AB = stats.spearmanr(cws_heatA_normalized,cws_heatB_normalized)
pecoef_AC = stats.pearsonr(cws_heatA2_normalized,cws_heatC_normalized)
spcoef_AC = stats.spearmanr(cws_heatA2_normalized,cws_heatC_normalized)
pecoef_AD = stats.pearsonr(cws_heatA3_normalized,cws_heatD_normalized)
spcoef_AD = stats.spearmanr(cws_heatA3_normalized,cws_heatD_normalized)
pecoef_AE = stats.pearsonr(cws_heatA4_normalized,cws_heatE_normalized)
spcoef_AE = stats.spearmanr(cws_heatA4_normalized,cws_heatE_normalized)

pecoef_BC = stats.pearsonr(cws_heatB1_normalized,cws_heatC_normalized)
spcoef_BC = stats.spearmanr(cws_heatB1_normalized,cws_heatC_normalized)
pecoef_BD = stats.pearsonr(cws_heatB2_normalized,cws_heatD_normalized)
spcoef_BD = stats.spearmanr(cws_heatB2_normalized,cws_heatD_normalized)
pecoef_BE = stats.pearsonr(cws_heatB3_normalized,cws_heatE_normalized)
spcoef_BE = stats.spearmanr(cws_heatB3_normalized,cws_heatE_normalized)

pecoef_CD = stats.pearsonr(cws_heatC_normalized,cws_heatD_normalized)
spcoef_CD = stats.spearmanr(cws_heatC_normalized,cws_heatD_normalized)
pecoef_CE = stats.pearsonr(cws_heatC2_normalized,cws_heatE_normalized)
spcoef_CE = stats.spearmanr(cws_heatC2_normalized,cws_heatE_normalized)

pecoef_DE = stats.pearsonr(cws_heatD1_normalized,cws_heatE_normalized)
spcoef_DE = stats.spearmanr(cws_heatD1_normalized,cws_heatE_normalized)

print('Pearson and Spearman Correlation for Crosswind Speed Variable for 5 Sensors :' )
print('Correlation A-B, A-C, A-D, A-E')
print('Pearson Corr  :', pecoef_AB, pecoef_AC, pecoef_AD, pecoef_AE)
print('Spearman Coor :', spcoef_AB, spcoef_AC, spcoef_AD, spcoef_AE)
print('Correlation B-C, B-D, B-E')
print('Pearson Corr  :', pecoef_BC, pecoef_BD, pecoef_DE)
print('Spearman Coor :', spcoef_BC, spcoef_BD, spcoef_DE)
print('Correlation C-D, C-E')
print('Pearson Corr  :', pecoef_CD, pecoef_CE)
print('Spearman Coor :', spcoef_CD, spcoef_CE)
print('Correlation D-E')
print('Pearson Corr  :', pecoef_DE)
print('Spearman Coor :', spcoef_DE)
print('\n')

pecoef_AB = list(pecoef_AB); pecoef_AC = list(pecoef_AC); pecoef_AD = list(pecoef_AD); pecoef_AE = list(pecoef_AE); pecoef_BC = list(pecoef_BC)
pecoef_BD = list(pecoef_BD); pecoef_BE = list(pecoef_BE); pecoef_CD = list(pecoef_CD); pecoef_CE = list(pecoef_CE); pecoef_DE = list(pecoef_DE)
AB = pecoef_AB[0]; AC = pecoef_AC[0]; AD = pecoef_AD[0]; AE = pecoef_AE[0]; BC = pecoef_BC[0]
BD = pecoef_BD[0]; BE = pecoef_BE[0]; CD = pecoef_CD[0]; CE = pecoef_CE[0]; DE = pecoef_DE[0]
x = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
y = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
fig = plt.figure()
ax0 = fig.add_subplot(111)
ax0.scatter (x, y)
x_formatter = FixedFormatter(["AB", "AC", "AD", "AE", "BC", "BD", "BE", "CD", "CE", "DE"])
x_locator = FixedLocator([AB, AC, AD, AE, BC, BD, BE, CD, CE, DE])
ax0.xaxis.set_major_formatter (x_formatter)
ax0.xaxis.set_major_locator (x_locator)
ax0.set_ylabel ('Pearson Correlation Coefficient', fontsize = 14)
ax0.set_xlabel ('Sensors', fontsize = 14)
ax0.set_title ('Crosswind Speed', fontsize = 18)
plt.xticks (rotation = 90)

spcoef_AB = list(spcoef_AB); spcoef_AC = list(spcoef_AC); spcoef_AD = list(spcoef_AD); spcoef_AE = list(spcoef_AE); spcoef_BC = list(spcoef_BC)
spcoef_BD = list(spcoef_BD); spcoef_BE = list(spcoef_BE); spcoef_CD = list(spcoef_CD); spcoef_CE = list(spcoef_CE); spcoef_DE = list(spcoef_DE)
AB = spcoef_AB[0]; AC = spcoef_AC[0]; AD = spcoef_AD[0]; AE = spcoef_AE[0]; BC = spcoef_BC[0]
BD = spcoef_BD[0]; BE = spcoef_BE[0]; CD = spcoef_CD[0]; CE = spcoef_CE[0]; DE = spcoef_DE[0]
x = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
y = [AB, AC, AD, AE, BC, BD, BE, CD, CE, DE]
fig = plt.figure()
ax1 = fig.add_subplot(111)
ax1.scatter (x, y)
x_formatter = FixedFormatter(["AB", "AC", "AD", "AE", "BC", "BD", "BE", "CD", "CE", "DE"])
x_locator = FixedLocator([AB, AC, AD, AE, BC, BD, BE, CD, CE, DE])
ax1.xaxis.set_major_formatter (x_formatter)
ax1.xaxis.set_major_locator (x_locator)
ax1.set_ylabel ('Spearman Correlation Coefficient', fontsize = 14)
ax1.set_xlabel ('Sensors', fontsize = 14)
ax1.set_title ('Crosswind Speed', fontsize = 18)
plt.xticks (rotation = 90)
plt.show()

#After Lesson A4
##Plot the CDF for all the sensors and for variables Temperature and Wind Speed, 
##then compute the 95% confidence intervals for variables Temperature and Wind Speed 
##for all the sensors and save them in a table (txt or csv form)

CI95_t_heatA = st.t.interval(alpha=0.95, df=len(t_heatA)-1, loc=np.mean(t_heatA), scale=st.sem(t_heatA))
CI95_t_heatB = st.t.interval(alpha=0.95, df=len(t_heatB)-1, loc=np.mean(t_heatB), scale=st.sem(t_heatB))
CI95_t_heatC = st.t.interval(alpha=0.95, df=len(t_heatC)-1, loc=np.mean(t_heatC), scale=st.sem(t_heatC))
CI95_t_heatD = st.t.interval(alpha=0.95, df=len(t_heatD)-1, loc=np.mean(t_heatD), scale=st.sem(t_heatD))
CI95_t_heatE = st.t.interval(alpha=0.95, df=len(t_heatE)-1, loc=np.mean(t_heatE), scale=st.sem(t_heatE))
CI95_t = {'heat A':[CI95_t_heatA], 'heat B':[CI95_t_heatB], 'heat C':[CI95_t_heatC], 'heat D':[CI95_t_heatD], 'heat E':[CI95_t_heatE]}

df_t = pd.DataFrame (CI95_t, columns = ['heat A', 'heat B', 'heat C', 'heat D', 'heat E'])

df_t.to_csv('D:/GEO1001/assignment/assignment01/hw01/ConfInter of Temperature.csv')

CI95_ws_heatA = st.t.interval(alpha=0.95, df=len(ws_heatA)-1, loc=np.mean(ws_heatA), scale=st.sem(ws_heatA))
CI95_ws_heatB = st.t.interval(alpha=0.95, df=len(ws_heatB)-1, loc=np.mean(ws_heatB), scale=st.sem(ws_heatB))
CI95_ws_heatC = st.t.interval(alpha=0.95, df=len(ws_heatC)-1, loc=np.mean(ws_heatC), scale=st.sem(ws_heatC))
CI95_ws_heatD = st.t.interval(alpha=0.95, df=len(ws_heatD)-1, loc=np.mean(ws_heatD), scale=st.sem(ws_heatD))
CI95_ws_heatE = st.t.interval(alpha=0.95, df=len(ws_heatE)-1, loc=np.mean(ws_heatE), scale=st.sem(ws_heatE))
CI95_ws = {'heat A':[CI95_ws_heatA], 'heat B':[CI95_ws_heatB], 'heat C':[CI95_ws_heatC], 'heat D':[CI95_ws_heatD], 'heat E':[CI95_ws_heatE]}

df_ws = pd.DataFrame (CI95_ws, columns = ['heat A', 'heat B', 'heat C', 'heat D', 'heat E'])

df_ws.to_csv('D:/GEO1001/assignment/assignment01/hw01/ConfInter of Wind Speed.csv')

t_heatA_cdf = thinkstats2.Cdf(t_heatA)
t_heatB_cdf = thinkstats2.Cdf(t_heatB)
t_heatC_cdf = thinkstats2.Cdf(t_heatC)
t_heatD_cdf = thinkstats2.Cdf(t_heatD)
t_heatE_cdf = thinkstats2.Cdf(t_heatE)
thinkplot.SubPlot(1, 3, 2)
thinkplot.Cdf(t_heatA_cdf, color = 'blue', label = 'sensor A')
plt.axvline (CI95_t_heatA[0], c = 'blue')
plt.axvline (CI95_t_heatA[1], c = 'blue')
thinkplot.Config(xlabel = 'temperature [deg C]', ylabel = 'cdf')
thinkplot.SubPlot(2, 3, 2)
thinkplot.Cdf(t_heatB_cdf, color = 'orange', label = 'sensor B')
plt.axvline (CI95_t_heatB[0], c = 'orange')
plt.axvline (CI95_t_heatB[1], c = 'orange')
thinkplot.Config(xlabel = 'temperature [deg C]', ylabel = 'cdf')
thinkplot.SubPlot(3, 3, 2)
thinkplot.Cdf(t_heatC_cdf, color = 'green', label = 'sensor C')
plt.axvline (CI95_t_heatC[0], c = 'green')
plt.axvline (CI95_t_heatC[1], c = 'green')
thinkplot.Config(xlabel = 'temperature [deg C]', ylabel = 'cdf')
thinkplot.SubPlot(4, 3, 2)
thinkplot.Cdf(t_heatD_cdf, color = 'red', label = 'sensor D')
plt.axvline (CI95_t_heatD[0], c = 'red')
plt.axvline (CI95_t_heatD[1], c = 'red')
thinkplot.Config(xlabel = 'temperature [deg C]', ylabel = 'cdf')
thinkplot.SubPlot(5, 3, 2)
thinkplot.Cdf(t_heatE_cdf, color = 'purple', label = 'sensor E')
plt.axvline (CI95_t_heatE[0], c = 'purple')
plt.axvline (CI95_t_heatE[1], c = 'purple')
thinkplot.Config(xlabel = 'temperature [deg C]', ylabel = 'cdf')
thinkplot.SubPlot(6, 3, 2)
thinkplot.Cdf(t_heatA_cdf, color = 'blue', label = 'sensor A')
thinkplot.Cdf(t_heatB_cdf, color = 'orange', label = 'sensor B')
thinkplot.Cdf(t_heatC_cdf, color = 'green', label = 'sensor C')
thinkplot.Cdf(t_heatD_cdf, color = 'red', label = 'sensor D')
thinkplot.Cdf(t_heatE_cdf, color = 'purple', label = 'sensor E')
thinkplot.Config(xlabel = 'temperature [deg C]', ylabel = 'cdf')
thinkplot.Show()

ws_heatA_cdf = thinkstats2.Cdf(ws_heatA)
ws_heatB_cdf = thinkstats2.Cdf(ws_heatB)
ws_heatC_cdf = thinkstats2.Cdf(ws_heatC)
ws_heatD_cdf = thinkstats2.Cdf(ws_heatD)
ws_heatE_cdf = thinkstats2.Cdf(ws_heatE)
thinkplot.SubPlot(1, 3, 2)
thinkplot.Cdf(ws_heatA_cdf, color = 'blue', label = 'sensor A')
plt.axvline (CI95_ws_heatA[0], c = 'blue')
plt.axvline (CI95_ws_heatA[1], c = 'blue')
thinkplot.Config(xlabel = 'wind speed [m/s]', ylabel = 'cdf')
thinkplot.SubPlot(2, 3, 2)
thinkplot.Cdf(ws_heatB_cdf, color = 'orange', label = 'sensor B')
plt.axvline (CI95_ws_heatB[0], c = 'orange')
plt.axvline (CI95_ws_heatB[1], c = 'orange')
thinkplot.Config(xlabel = 'wind speed [m/s]', ylabel = 'cdf')
thinkplot.SubPlot(3, 3, 2)
thinkplot.Cdf(ws_heatC_cdf, color = 'green', label = 'sensor C')
plt.axvline (CI95_ws_heatC[0], c = 'green')
plt.axvline (CI95_ws_heatC[1], c = 'green')
thinkplot.Config(xlabel = 'wind speed [m/s]', ylabel = 'cdf')
thinkplot.SubPlot(4, 3, 2)
thinkplot.Cdf(ws_heatD_cdf, color = 'red', label = 'sensor D')
plt.axvline (CI95_ws_heatD[0], c = 'red')
plt.axvline (CI95_ws_heatD[1], c = 'red')
thinkplot.Config(xlabel = 'wind speed [m/s]', ylabel = 'cdf')
thinkplot.SubPlot(5, 3, 2)
thinkplot.Cdf(ws_heatE_cdf, color = 'purple', label = 'sensor E')
plt.axvline (CI95_ws_heatE[0], c = 'purple')
plt.axvline (CI95_ws_heatE[1], c = 'purple')
thinkplot.Config(xlabel = 'wind speed [m/s]', ylabel = 'cdf')
thinkplot.SubPlot(6, 3, 2)
thinkplot.Config(xlabel = 'wind speed', ylabel = 'cdf')
thinkplot.Cdf(ws_heatA_cdf, color = 'blue', label = 'sensor A')
thinkplot.Cdf(ws_heatB_cdf, color = 'orange', label = 'sensor B')
thinkplot.Cdf(ws_heatC_cdf, color = 'green', label = 'sensor C')
thinkplot.Cdf(ws_heatD_cdf, color = 'red', label = 'sensor D')
thinkplot.Cdf(ws_heatE_cdf, color = 'purple', label = 'sensor E')
thinkplot.Config(xlabel = 'wind speed [m/s]', ylabel = 'cdf')
thinkplot.Show()

ttest,pval_t_ED = ttest_ind(t_heatE,t_heatD)
ttest,pval_t_DC = ttest_ind(t_heatD,t_heatC)
ttest,pval_t_CB = ttest_ind(t_heatC,t_heatB)
ttest,pval_t_BA = ttest_ind(t_heatB,t_heatA)

ttest,pval_ws_ED = ttest_ind(ws_heatE,ws_heatD)
ttest,pval_ws_DC = ttest_ind(ws_heatD,ws_heatC)
ttest,pval_ws_CB = ttest_ind(ws_heatC,ws_heatB)
ttest,pval_ws_BA = ttest_ind(ws_heatB,ws_heatA)

print("p-value temperature E-D",pval_t_ED)
print("p-value temperature D-C",pval_t_DC)
print("p-value temperature C-B",pval_t_CB)
print("p-value temperature B-A",pval_t_BA)

print("p-value wind speed E-D",pval_ws_ED)
print("p-value wind speed D-C",pval_ws_DC)
print("p-value wind speed C-B",pval_ws_CB)
print("p-value wind speed B-A",pval_ws_BA)